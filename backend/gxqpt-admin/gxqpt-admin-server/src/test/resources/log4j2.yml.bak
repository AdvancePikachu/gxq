# 关于日志：日志是调试和报错快速定位错误的最快捷的途径，所以在开发、测试时最好配置好
# 正式线可以将日志级别调整到warn/error，适当提高效率

Configuration:
  status: warn # 用来指定log4j本身的打印日志的级别

# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 ：10：28，921
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %t 输出产生该日志事件的线程名
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %F 显示调用logger的源文件名
# %M 显示调用logger的方法名
# %L 显示调用logger的代码行
# %m 输出代码中指定的消息
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
# %c 输出所属的类目，通常就是所在类的全名
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
# %x 按NDC（Nested Diagnostic Context，线程堆栈）顺序输出日志
# %X 按MDC（Mapped Diagnostic Context，线程映射表）输出日志。通常用于多个客户端连接同一台服务器，方便服务器区分是那个客户端访问留下来的日志。
# %% 显示一个百分号

  Properties: # 定义全局变量
    Property: # 缺省配置（用于开发环境）。其他环境需要在VM参数中指定，如下：
      #测试：-Dlog.level.console=INFO -Dlog.level.sql=DEBUG -Dlog.level.service=INFO -Dlog.level.impl=INFO
      #生产：-Dlog.level.console=WARN -Dlog.level.sql=WARN -Dlog.level.service=WARN -Dlog.level.impl=WARN
      - name: common-pattern     # 日志格式
        value: "%d{yyyy-MM-dd HH:mm:ss,SSS}:[%5p] [%t:%r(ms)] (%F:%M:%L) --> %m%n"
      - name: log.level.console  # 控制台的日志级别,调试时设置INFO， 正式线设置WARN/ERROR
        value: INFO
      - name: log.level.service  # service层的日志级别,调试时设置INFO， 正式线设置WARN/ERROR
        value: INFO
      - name: log.level.impl     # api impl层的日志级别,调试时设置INFO， 正式线设置WARN/ERROR
        value: INFO
      - name: log.level.sql      # 打印SQL的日志级别,调试时设置DEBUG(显示sql)/TRACE(显示result+sql)， 正式线设置WARN/ERROR
        value: DEBUG
      - name: log.level.debugmode # 默认调试模式
        value: ERROR
      - name: log.path           # 日志路径
        value: ./logs
      - name: project.name       # 日志文件名：一般与工程名相同
        value: gxqpt-base-server

  Appenders:                     # 输出源
    Console:                     # 输出到控制台
      - name: CONSOLE_APPENDER     # 指定Appender的名字.
        target: SYSTEM_OUT         # SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
        ThresholdFilter:
          level: ${sys:log.level.console} # “sys:”表示：如果VM参数中没指定这个变量值，则使用本文件中定义的缺省全局变量值
          onMatch: ACCEPT
          onMismatch: DENY
        PatternLayout:             # 输出格式
          pattern: ${common-pattern}
      - name: CONSOLE_SQL_APPENDER     # 指定Appender的名字.
        target: SYSTEM_OUT         # SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
#        ThresholdFilter:
#          level: ${sys:log.level.sql} # “sys:”表示：如果VM参数中没指定这个变量值，则使用本文件中定义的缺省全局变量值
#          onMatch: ACCEPT
#          onMismatch: DENY
        PatternLayout:             # 输出格式
          pattern: ${common-pattern}
    RollingFile:                 # 定义超过指定大小自动删除旧的.创建新的的Appender超过32MB归档
      - name: SERVICE_APPENDER
        ignoreExceptions: false
        fileName: ${sys:log.path}/${project.name}/service.log
        filePattern: "${sys:log.path}/${project.name}/$${date:yyyy-MM}/service-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${common-pattern}
        Policies:
          SizeBasedTriggeringPolicy:
            size: "128 MB"
        DefaultRolloverStrategy:
          max: 1000
      - name: IMPL_APPENDER
        ignoreExceptions: false
        fileName: ${sys:log.path}/${project.name}/impl.log
        filePattern: "${sys:log.path}/${project.name}/$${date:yyyy-MM}/impl-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${common-pattern}
        Policies:
          SizeBasedTriggeringPolicy:
            size: "128 MB"
        DefaultRolloverStrategy:
          max: 1000
      - name: SQL_APPENDER
        ignoreExceptions: false
        fileName: ${sys:log.path}/${project.name}/sql.log   # 指定输出日志的目的文件带全路径的文件名
        filePattern: "${sys:log.path}/${project.name}/$${date:yyyy-MM}/sql-%d{yyyy-MM-dd}-%i.log.gz"  # 指定新建日志文件的名称格式.
        PatternLayout:           # 输出格式
          pattern: ${common-pattern}
        Policies:                # 指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.
          SizeBasedTriggeringPolicy:
            size: "128 MB"
        DefaultRolloverStrategy: # 指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。
          max: 1000

  Loggers:
    Root:                                 # 节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
      level: ${sys:log.level.console}     # 日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
      AppenderRef:                        # Root的子节点，用来指定该日志输出到哪个Appender.
        - ref: CONSOLE_APPENDER
    Logger:                               # 为某些具体的包配置特殊的Log级别，方便调试
      - name: com.hengyunsoft.platform.repository
        additivity: true                  # 若是additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出
        level: ${sys:log.level.service}
        AppenderRef:
          - ref: SERVICE_APPENDER
      - name: com.hengyunsoft.platform.open.impl
        additivity: true
        level: ${sys:log.level.impl}
        AppenderRef:
          - ref: IMPL_APPENDER
      - name: com.hengyunsoft.platform.repository.authority.dao   # 用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.
        additivity: false
        level: ${sys:log.level.sql}
        AppenderRef:                      # Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。
          - ref: CONSOLE_SQL_APPENDER     # 将sql同时打印到控制台和文件中
          - ref: SQL_APPENDER
#      - name: org.mybatis               # [调试]在控制台打印mybatis日志
#        additivity: false
#        level: ${sys:log.level.debugmode}
#        AppenderRef:
#          - ref: CONSOLE_SQL_APPENDER