<template>
  <Layout>
    <Content>
      <Breadcrumb>
        <BreadcrumbItem>接入管理</BreadcrumbItem>
        <BreadcrumbItem>应用分析</BreadcrumbItem>
      </Breadcrumb>
      <Card>
        <Form
          ref="formValidate"
          inline
          :label-width="100"
          :model="searchCondition">
          <FormItem label="时间：">
            <Select v-model="searchCondition.timeType" style="width:200px">
              <Option v-for="item in timeList" :value="item.value" :key="item.value">{{item.label}}</Option>
            </Select>
          </FormItem>
          <FormItem>
            <Button type="default" @click="goBack">返回</Button>
          </FormItem>
        </Form>
        <Row>
          <Col span="6" :offset="1">
            <Gauge el="appRate" ref="appRate" :gaugeOption="appScoreOption" title="应用评分">
              <div id="appRate"></div>
            </Gauge>
          </Col>
          <Col span="6" :offset="1">
            <Gauge el="bugDealTime" ref="bugDealTime" :gaugeOption="faultTimeAvgOption" title="故障处理平均时长">
              <div id="bugDealTime"></div>
            </Gauge>
          </Col>
          <Col span="6" :offset="1">
            <Gauge el="bugNum" ref="bugNum" :gaugeOption="untreatedFaultSumOption" title="未处理故障数">
              <div id="bugNum"></div>
            </Gauge>
          </Col>
        </Row>
        <Row style="margin-top: 90px;">
          <Col span="10" :offset="1">
            <h3>故障产生数量分析</h3>
            <ChartLine el="bugNumAna" ref="bugNumAna" :lineOption="bugNumOption">
              <div id="bugNumAna"></div>
            </ChartLine>
          </Col>
          <Col span="10" :offset="1">
            <h3>故障级别分析</h3>
            <div id="bugTypeAna">
              <span v-if="!hasBugs">暂无故障</span>
            </div>
          </Col>
        </Row>
      </Card>
    </Content>
  </Layout>
</template>

<script>
// 3d饼图插件
import * as d3 from 'd3'
import Donut3D from '@static/echart/3dpie/3dpie1.js'
import '@static/echart/3dpie/3dpie2.js'

import api from '@/api/axiosApi'
import operationApiList from '@/api/operationApiList'
// 仪表盘
import Gauge from './../echarts/Gauge.vue'
// 折线
import ChartLine from './../echarts/ChartLine.vue'

const timeList = [{
  label: '最近一天',
  value: 1
}, {
  label: '最近一周',
  value: 2
}, {
  label: '最近一月',
  value: 3
}, {
  label: '最近一年',
  value: 4
}]

function getGaugeOption () {
  return {
    tooltip: {
      formatter: ''
    },
    series: [{
      name: '',
      type: 'gauge',
      detail: {formatter:'{value}'},
      // data: [{value: 50, name: '完成率'}],
      axisLine:{
        show: true,
        lineStyle:{
          width: '10',
          color: [[0.2, '#3E8BFF'], [0.4, '#00D39F'], [0.6, '#FFCA4B'], [0.8, '#FF790D'], [1, '#FF5A00']]
        }
      }
    }]
  }
}

const lineOption = {
  xAxis: {
    type: 'category',
    // data: ['1', '2', '3', '4', '5', '6', '7']
  },
  series: [{
    // data: [820, 600, 570, 409, 322, 310, 200],
    type: 'line'
  }]
}

export default {
  components: {
    Gauge,
    ChartLine
  },
  data () {
    const vm = this
    return {
      hasBugs: false,
      appScoreOption: {
        ...getGaugeOption()
      },
      faultTimeAvgOption: {
        ...getGaugeOption()
      },
      untreatedFaultSumOption: {
        ...getGaugeOption()
      },
      bugNumOption: {
        ...lineOption
      },
      timeList,
      searchCondition: {
        // 时间
        timeType: 1,
        // 应用id
        appId: vm.$route.query.id
      }
    }
  },
  mounted() {
    this.search()
  },
  methods: {
    search () {
      const vm = this
      api(operationApiList.faultFindAnalyse, {
        ...vm.searchCondition
      }).then(res => {
        if (res.data.errcode === 0) {
          const {appScore, faultLevel, faultSumX, faultSumY, faultTimeAvg, untreatedFaultSum} = res.data.data

          // 应用评分
          vm.appScoreOption.series[0].data = [{
            value: Number(appScore)
          }]
          // 故障处理时间
          vm.faultTimeAvgOption.series[0].data = [{
            value: Number(faultTimeAvg)
          }]
          // 未处理故障数
          vm.untreatedFaultSumOption.series[0].data = [{
            value: Number(untreatedFaultSum)
          }]
          // 故障数量分析X轴
          vm.bugNumOption.xAxis.data = faultSumX
          // 故障数量分析Y轴
          vm.bugNumOption.series[0].data = faultSumY
          // 故障级别分析
          vm.drawPie(faultLevel)

          vm.$refs.appRate.refresh()
          vm.$refs.bugDealTime.refresh()
          vm.$refs.bugNum.refresh()
          vm.$refs.bugNumAna.refresh()
        }
      },(error) => {console.log(error)})
    },
    goBack() {
      this.$router.go(-1)
    },
    drawPie(data) {
      const salesData = [{
        label: "级别2",
        color: "#E97C30"
      }, {
        label: "级别1",
        color: "#5A99D3"
      }, {
        label: "级别3",
        color: "#A3A3A3"
      }];
      const datas = []
      salesData.map((item, idx) => {
        datas.push({
          label: item.label,
          value: data[idx],
          color: item.color
        })
        if(data[idx]){
          this.hasBugs = true
        }
      })
      if (!this.hasBugs) {
        return
      }
      const svg = d3.select("#bugTypeAna").append("svg")
        .attr("width", 320)
        .attr("height", 320)
        .append("g").attr("id", "circleDonut")
      Donut3D.draw("circleDonut", datas, 150, 150, 130, 100, 30, 0)
    }
  },
  watch: {
    'searchCondition.timeType' (val, oldVal) {
      this.search()
    }
  }
}
</script>

<style lang='less'>
.access-upgrade{
  span.handle{
    margin: 0 5px;
    display: inline-block;
  }
}
</style>

<style lang='less' scoped>
#appRate, #bugDealTime, #bugNum, #bugNumAna, #bugTypeAna{
  height: 320px;
  text-align: center;
  line-height: 320px;
}
</style>
