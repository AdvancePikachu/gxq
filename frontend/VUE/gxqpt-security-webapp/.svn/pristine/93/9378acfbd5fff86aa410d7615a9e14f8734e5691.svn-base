<template>
  <div class="wAuto">
    <Layout>
      <Content>
        <Breadcrumb>
          <BreadcrumbItem>运维文档管理</BreadcrumbItem>
          <BreadcrumbItem>运维文档查询</BreadcrumbItem>
        </Breadcrumb>
        <Card>
          <Form ref="formValidate" inline :label-width="90">
            <FormItem label="文档类别">
              <div class="ivu-form-item-content" @click="getTypeTree">
                <div class="ivu-input-wrapper ivu-input-type">
                  <i class="ivu-icon ivu-icon-load-c ivu-load-loop ivu-input-icon ivu-input-icon-validate"></i>
                  <div class="ivu-input" style="width: 160px;">{{typeInfo.title}}</div>
                </div>
              </div>
            </FormItem>
            <FormItem label="文档编号">
              <Input type="text" v-model="formData.code"></Input>
            </FormItem>
            <FormItem label="文档名称">
              <Input type="text" v-model="formData.name"></Input>
            </FormItem>
            <FormItem label="上传人">
              <Input type="text" v-model="formData.createUserName"></Input>
            </FormItem>
            <FormItem label="上传时间">
              <DatePicker
                class="queryTime"
                v-model="formData.queryTime"
                format="yyyy-MM-dd"
                type="daterange"
                placement="bottom-end"
                placeholder="请选择日期">
              </DatePicker>
            </FormItem>
            <FormItem>
              <Button type="info" @click="getDocList">查询</Button>
              <Button type="info" @click="resetCondition">重置</Button>
            </FormItem>
          </Form>
          <Table border ref="selection" :columns="columns" :data="docList"></Table>
          <div class="bottom-bar">
            <Page :total="pageInfo.total" show-sizer show-elevator></Page>
          </div>
        </Card>
      </Content>
      <Modal v-model="modal" title="详情" class-name="vertical-center-modal" width="60%">
        <div slot="footer">
          <Button type="text" @click="closeModal">关闭</Button>
        </div>
      </Modal>
      <Modal
        v-model="typeModal"
        title="文档类别选择"
        class-name="vertical-center-modal"
        width="40%"
        @on-ok="selectType">
        <Tree ref="typeTree" :data="typeTree" empty-text="暂无文档类别"></Tree>
      </Modal>
    </Layout>></h3>
    
  </div>
</template>

<script>
import api from '@/api/axiosApi'
import operationApiList from '@/api/operationApiList'

function getDateRange(time) {
  if (!time) {
    return ''
  }
  // 结束日期
  const endDate = new Date(time)
  // 当前日期往前推30天
  const startDate = new Date(time - 30 * 24 * 60 * 60 * 1000)
  return {
    start: `${startDate.getFullYear()}-${startDate.getMonth() + 1}-${startDate.getDate()}`,
    end: `${endDate.getFullYear()}-${endDate.getMonth() + 1}-${endDate.getDate()}`
  }
}

function handleTreeData(data) {
  data.map((value, idx) => {
    if (value.children && value.children.length > 0) {
      data[idx].disableCheckbox = true
      data[idx].expand = true
      data[idx].children = handleTreeData(data[idx].children)
    }
  })
  return data
}
let isManage = false
export default {
  data() {
    const date = getDateRange(Date.now())
    return {
      // 选择信息类型的弹窗
      typeModal: false,
      modal: false,
      // 分页信息
      pageInfo: {
        pageNo: 1,
        pageSize: 10,
        total: 0
      },
      formData: {
        code: '',
        name: '',
        createUserName: '',
        // 初始化开始时间和结束时间
        queryTime: [date.start, date.end],
      },
      // 文档类别信息
      typeInfo: {
        // 类型名称
        title: '',
        // 类型id
        id: ''
      },
      columns: [{
        type: 'selection',
        width: 60,
        align: 'center'
      },
      {
        title: '文档名称',
        key: 'name'
      },
      {
        title: '文档编号',
        key: 'code'
      },
      {
        title: '文档类别',
        key: 'classifyName'
      },
      {
        title: '文档描述',
        key: 'description'
      },
      {
        title: '上传时间',
        key: 'createTime'
      },
      {
        title: '上传人',
        key: 'createUserName'
      },
      {
        title: '下载次数',
        key: 'downloadCount'
      },
      {
        title: '操作',
        key: 'act',
        align: 'center',
        render: (h, params) => {
          const documentId = params.row.documentId
          const preview = h('Button', {
            props: {
              type: 'primary',
              size: 'small'
            },
            on: {
              click: () => {
                this.modal = true
              }
            }
          }, '预览')
          const download = h('a', {
            attrs: {
              href: `/api/file/p/file/down?id=${documentId}&userId=1&token=vl2GrrRh69xW5ARyHZjHhvLw6gzI5OdiJBp1Ve4jHidq4N6ijF8aln6UJuNBR5dDVcNA6mbOxmJAj94NtCrlXq04Hf4mhqNnB1JQrWdIlIrN5srcDUrm0hfrv_D30mDohah2nYHoZAFnlHzhT86Rl5pbBuN6lnpkJy6rnNTcvS6vlNbuVuz6b9HlRCXbFhreJxdAhIJ_xJFExuxMXfLiPhD4tDP3PrPMFdFBxiD5xE5Q62zlNwpEZuNhvr69PeTXljl68aBwNF0jVvbxRlPixqJ2PybbXyLbZqR70EVbbbbKbcdkThFkHq0NfLbzpwfhr6PXHC0xFkNGRXvOD6BV6KrFpWngVv4F6Vlv6fVipPd8zUzADs86pl0aDHDl2RrUzdpgFvZiHtFVPxFejVPWtSrAh6biZpbvv6pK6In1pJ6O4fvhzupJfXlhztnprv6w0vRvLTJ_fANGlSrirPBzpSVgV1dwFV6GHnLfN8JOjzrQHExVNLpIDynUfynilKVfVVbQ21HHPoRXZyLpjlrW8ddXVLRUvahQtyjjnbzHxn2LFP8Bv4pdLKZpfI4Wx35q4ovarSt_wg_nqeKgsPEVGe1ay2dxN1lqyw4wwXK.owW5.7y.vl.zo9x.318C_m41j4j9x_GJncwsfSw5_.yS9945U7P.2y1Zif1e4_bok9g795..wf95iu4._7.M43bN2lT0d`,
              target: '_blank'
            }
          }, [h('Button', {
            props: {
              type: 'primary',
              size: 'small'
            }
          }, '下载')])
          const fileDelete = h('Button', {
            props: {
              type: 'primary',
              size: 'small'
            },
            on: {
              click: () => {
                alert('删除')
              }
            }
          }, '删除')
          const act = isManage ? [preview, download, fileDelete] : [preview, download]
          return h('div', {
            attrs: {
              class: 'act-container'
            }
          }, act)
        }
      }],
      docList: [],
      // 信息类型list
      typeTree: []
    }
  },
  computed: {
    // 判断是管理还是查询，1是管理
    isManage() {
      isManage = this.$route.params.manage === '1'
      return isManage
    },
    // 请求文件列表的地址
    fileQueryUrl() {
      return this.isManage ? 'fileManageQuery' : 'fileQuery'
    }
  },
  mounted () {
    this.getDocList()
  },
  methods: {
    // 获取所有文档的列表
    getDocList () {
      const vm = this
      const endTime = getDateRange(vm.formData.queryTime[1]).end
      const startTime = getDateRange(vm.formData.queryTime[0]).end
      api(operationApiList[vm.fileQueryUrl], {
        pageNo: vm.pageInfo.pageNo,
        pageSize: vm.pageInfo.pageSize,
        data: {
          classifyId: vm.typeInfo.id,
          sord: 'asc',
          createTimeEnd: endTime ? `${endTime} 23:59:59` : '',
          createTimeStart: startTime ? `${startTime} 00:00:00` : '',
          ...vm.formData
        }
      }).then(res => {
        if (res.data.errcode === 0) {
          vm.docList = res.data.data.list
          vm.pageInfo.total = Number(res.data.data.total)
        }
      }, error => {console.log(error)})
    },
    // 获取文档类型的树结构
    getTypeTree() {
      const vm = this
      vm.typeModal = true
      if (vm.typeTree.length > 0) {
        return
      }
      api(operationApiList.getTypeTree, {
        id: ''
      }).then(res => {
        if (res.data.errcode === 0) {
          const tree = JSON.parse(JSON.stringify(res.data.data).replace(/name/g, 'title'))
          vm.typeTree = handleTreeData(tree)
        }
      }, error => {console.log(error)})
    },
    // 确定选择的文档类型
    selectType() {
      const vm = this
      const obj = vm.$refs.typeTree.getSelectedNodes()
      if (obj.length === 0) {
        vm.$Message.error('请选择节点')
        return
      }
      if (obj[0].children && obj[0].children.length > 0) {
        vm.$Message.error('请选择子节点')
        return
      }
      vm.typeInfo = obj[0]
    },
    closeModal(){
      this.modal = false;
    },
    resetCondition() {
      Object.assign(this.$data.formData, this.$options.data().formData)
      Object.assign(this.$data.typeInfo, this.$options.data().typeInfo)
    }
  },
  watch: {
    '$route' () {
      const vm = this
      Object.assign(vm.$data, vm.$options.data())
      vm.$nextTick(() => {
        vm.getDocList()
      })
    }
  }
}
</script>

<style type="text/css" scoped>
.wAuto{
  width: 100%;
}
.queryTime{
  width: 200px;
}
.flow{
  margin-top: 20px ;
}
</style>

<style lang="less">
.act-container button{
  margin: 0 5px !important;
}
</style>