<template>
  <Card>
    <p v-if="idType==6" slot="title">单位申请信息：</p>
    <Form ref="configInfo" inline :label-width="100" :model="configInfo" :rules="configInfoValidate">
      <FormItem label="申请单位：" prop="applyOrgid">
        <Select v-model="configInfo.applyOrgid" style="width:200px" :disabled='disabled'>
          <Option v-for="item in unitList" :value="item.id" :key="item.id">{{item.name}}</Option>
        </Select>
      </FormItem>
      <FormItem v-if="idType==4" label="申请人：" prop="applyUname">
        <Input type="text" v-model="configInfo.applyUname" style="width:140px" :disabled='disabled'></Input>
      </FormItem>
      <FormItem label="申请人邮箱：" prop="applyEmail">
        <Input type="text" v-model="configInfo.applyEmail" style="width:140px" :disabled='disabled'></Input>
      </FormItem>
      <FormItem v-if="!disab">
        <Button type="primary" @click="popModal">+添加</Button>
      </FormItem>
      <hy-table highlight-row :columns="tableList.columns" :data="tableList.data" class="server-list" @on-page-change="getList" :needPage="false" />
      <FormItem label="申请原因：" style="margin-top: 20px;" prop="applyReason">
        <Input type="textarea" style="width: 400px;" v-model="configInfo.applyReason" :disabled='disabled'> </Input>
      </FormItem>
      <FormItem v-if="idType==4 || idType==6 || idType==5" label="附件说明：" v-for="(item,idx) in configInfo.attachment" :key="idx">
        <Input type="text" v-model="item.fileName" disabled style="width: 400px;"></Input>
        <Button type="primary" @click="downLoad(item.fileUrl,item.fileName)">下载</Button>
      </FormItem>
      <FormItem v-if="idType!=4 && idType!=6 && idType!=5" label="附件说明：" style="margin-top: 40px;">
        <hy-upload ref="evalReport" multiple :on-success="setEvalReport" :on-remove="removeEvalReport" :before-upload="evalBeforeUpload" ></hy-upload> <!-- :defaultFileList="configInfo.attachment" -->
      </FormItem>
      <approvalOpinions v-if="idType!=2 &&  idType!=2"></approvalOpinions>
    </Form>
    <Row class="bottom-bar" style="text-align: center">
      <Col>
        <Button v-if="idType!=6" type="default" @click="quit">取消</Button>
        <Button v-if="idType!=4 && idType!=5 && idType!=6" type="primary" @click="submit(1,'configInfo')">保存</Button>
        <Button v-if="idType!=4 && idType!=5 && idType!=6" type="primary" @click="submit(2,'configInfo')">提交</Button>
        <Button v-if="idType==4" type="primary" @click="audit">审批</Button>
        <Button v-if="idType==5" type="primary" @click="resources(0)">配置资源</Button>
        <Button v-if="idType==5 && configInfo.stepCode != 'YOUYI_FINAL'" type="primary" @click="resources(1)">资源不足</Button>
      </Col>
    </Row>
    <Modal v-model="showModal" title="服务器资源资源配置" :mask-closable='false' :closable='false'>
        <!-- <div slot="footer">
          <Button type="info" @click="doAddServer(applyServer)">确定</Button>
          <Button type="text" @click="closeModal">关闭</Button>
        </div> -->
      <server-config ref="serverConfig" v-on:saveConfig="doAddServer" :applyEdit='applyServer'/>
      <div slot="footer">
				<Button type="primary" @click="applySubmit('serverConfig')">确定</Button>
				<Button type="text" @click="closeModal">关闭</Button>
			</div>
    </Modal>
    <Modal v-model="auditModal" title="审批">
        <Form ref="auditInfo" :label-width="100" :model="auditInfo" :rules="auditInfoValidate">
          <FormItem label="审批结果" prop="passFlag">
            <Select v-model="auditInfo.passFlag" style="width:200px">
              <Option value="通过">通过</Option>
              <Option value="不通过">不通过</Option>
            </Select>
          </FormItem>
          <FormItem label="审批意见" prop="apprOpinion">
            <Input type="textarea" style="width: 400px;" v-model="auditInfo.apprOpinion"> </Input>
          </FormItem>
        </Form>
        <div slot="footer">
          <Button type="primary" @click="auditBtn">确定</Button>
          <Button type="text" @click="closeAuditModal">关闭</Button>
        </div>
    </Modal>
  </Card>
</template>

<script>
import serverConfig from './../common/serverConfig'
import api from '@/api/axiosApi'
import softhardApiList from '@/api/softhardApiList'
import superviseApiList from '@/api/superviseApiList'
import hyUpload from '@/components/hengyun/hyUpload'
import approvalOpinions from './../common/approvalOpinions'
const validateEmail = (rule, value, callback) => {
    let regEmail= /^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/;
    if (!value) {
        return callback(new Error('邮箱不能为空！'));
    }
    // 模拟异步验证效果
    setTimeout(() => {
        if (!regEmail.test(value)) {
            callback(new Error('邮箱格式不正确'));
        } else {
            if (value <= 0) {
                callback(new Error('邮箱不能为空!'));
            } else {
                callback();
            }
        }
    }, 1000);
};
function getConfigInfo() {
  return {
    cpuCount:'',
    memorySize:'',
    system:'',
    netScope:'',
    netWide:'',
    content:'',
    sysDisksize:0,
    applyCount: 0,
    disks: [
      {
        diskSize:'',
        diskName:''
      }
    ],
  }
}

export default {
  components: {
    serverConfig,
    hyUpload,
    approvalOpinions
  },
  props: {
     disab: {
      type: Boolean,
      default:false
    }
  },
  data () {
    return {
      isEdit:false,
      idx:0,
      disabled:false,
      idType:0,
      auditInfo:{},
      diskColumns:[
        {
          title:'磁盘',
          key:'diskName',
          width: 150,
        },
        {
          title:'大小(单位:GB)',
          key:'diskSize',
          width: 110,
        },
      ],
      unitList:[],//单位列表
      auditInfoValidate:{//审核表单验证
        passFlag: [{
          required: true,
          message: '审批结果不能为空，请重新选择！',
          trigger: 'change'
        }],
        apprOpinion: [{
          required: true,
          message: '审批意见不能为空！',
          trigger: 'change'
        }],
      },
      configInfoValidate:{
        applyOrgid: [{
          required: true,
          message: '单位不能为空，请重新选择！',
          trigger: 'change'
        }],
        applyEmail: [{
          validator:validateEmail,
          trigger: 'blur'
        }],
        applyReason: [{
          required: true,
          message: '申请原因不能为空，请重新填写！',
          trigger: 'change'
        }],
      },
      tableList: {
        columns: [
          {
            type: 'index',
            title: '序号',
            width: 60,
            align: 'center'
          },
          {
            title: 'CPU核数(单位:核)',
            key: 'cpuCount'
          },
          {
            title: '内存(单位:GB)',
            key: 'memorySize'
          },
          {
            title: '操作系统',
            key: 'systemName'
          },
          {
            title: '网络区域',
            key: 'netScopeName'
          },
          {
            title: '网络宽带(单位:MB)',
            key: 'netWide'
          },
          {
            title: '系统大小(单位:GB)',
            key: 'sysDisksize'
          },
          {
            title: '申请数量(单位:个)',
            key: 'applyCount'
          },
          {
            title: '磁盘列表',
            key: 'disks',
            align: 'center',
            width: 300,
            render: (h, params) => {
              return h('Table', {
                class:'server-list',
                props: {
                  columns: this.diskColumns,
                  data:params.row.disks
                }
              })
            }
          },
          {
            title: '操作',
            key: 'address',
            render: (h, params) => {
              const vm = this
              const age = params.row.age
              const id = params.row.age
              const edit = h('Button', {
                props: {
                  type: 'primary',
                  size: 'small'
                },
                domProps: {
                  innerHTML: '修改'
                },
                on: {
                  click () {
                    console.log(params);
                    vm.gotoCtrl(1, params.index)
                  }
                }
              })
              const deleteServer = h('Button', {
                props: {
                  type: 'error',
                  size: 'small'
                },
                domProps: {
                  innerHTML: '删除'
                },
                on: {
                  click () {
                    vm.gotoCtrl(0, params.index)
                  }
                }
              })
              switch (this.disab) {
                case true:
                  return h('div', ['--'])
                default:
                  return h('div', [edit, deleteServer])
              }
            }
          }
        ],
        data: []
      },
      showModal: false,
      auditModal:false,
      // 修改时服务器配置的一些信息
      configInfo:{},
      applyServer:{
        cpuCount:'',
        memorySize:'',
        system:'',
        netScope:'',
        netWide:'',
        gatewayDesc:'',
        sysDisksize:0,
        applyCount: 1,
        disks: [],
      },
      disks: [
        {
          createTime:"",
          diskId:"",
          diskName:"",
          diskPath:"",
          diskSize:"",
          diskType:"",
          id:"",
          serverId:"",
        }
      ],
    }
  },
  mounted () {
    console.log(this.netScopeArray)
    this.getUnitData();
    this.idType = this.$route.params.id;
    if(this.$route.params.id != 1){ //1:新建,2:重新提交,3:修改,4:审批,5:处理,6:查看详情
      this.disabled = true;
      this.getApplyManageById();//变更参数，获取数据
      console.log("传参：");
      console.log(this.$route.params.departData);
    }
    // if(this.$route.params.id == 2)this.disab = true;//重新提交状态不允许编辑
    this.disabled = this.disab;
  },
  methods: {
    getUnitData(){//获取基本单位id
      api(superviseApiList.findOrgByUser).then((res) => {
          console.log(res);
          if(res.data.errcode == 0) {
            this.unitList = res.data.data;
          }else{
              this.$Message.error(res.data.errmsg);
          }
      }, (error) => {})
    },
    getApplyManageById() { // 查询服务分配管理分页
      api(softhardApiList.getApplyManageById,{id:this.$route.params.departData.id}).then((res) => {
        if(res.data.errcode == 0){
          res.data.data.applyServer.forEach(item => {
            if(item.disks.length == 0){
              item.disks.push({diskSize:'',diskName:''});
            }else{
              item.disks.forEach((diskItem,index) => {
                diskItem.diskName = '数据磁盘' + (diskItem.order+1)
              })
            }
          })
          console.log(res.data.data.applyServer);
          this.tableList.data = res.data.data.applyServer;
          // this.tableList.data.forEach(item=>{//删除ZDWH_czxt_
          //   item.system = item.system.slice(10);
          // });
          this.configInfo = res.data.data;
          this.configInfo.applyServer = {};
          console.log(this.configInfo.attachment);
          if(this.configInfo.attachment.length != 0){
            this.configInfo.attachment.forEach(item => {
              item.name = item.fileName;
              item.url = item.fileUrl;
            })
          }
        }else{
          this.$Message.error(res.data.errmsg);
        }
      }, (err) => {
        //dong something...
      })
    },
    validForm() {
      this.$refs['configInfo'].validate();
    },
    evalBeforeUpload() { //文件上传前清空
      // this.$refs.evalReport.$children[0].clearFiles();
    },
    setEvalReport(response, file, fileList) {
      if(this.$route.params.id != 3){
        this.configInfo.attachment = [];
      }
      console.log(fileList);
      fileList.forEach(item => {
        let obj = {};
        if(item.response){
          obj.busType = 'hd_applymanage_upload';
          obj.fileName = item.response.data.list[0].submittedFileName;
          obj.fileSize = item.response.data.list[0].size;
          obj.fileType = item.response.data.list[0].mime;
          obj.fileUrl = item.response.data.list[0].url;
          obj.name = item.response.data.list[0].submittedFileName;
          obj.url = item.response.data.list[0].url;
          this.configInfo.attachment.push(obj);
        }
      });
      console.log(this.configInfo);
      this.validForm();
    },
    removeEvalReport(file, fileList) {
      this.configInfo.attachment = [];
      this.configInfo.attachment = fileList;
      this.validForm();
    },
    // 从服务端获取列表数据
    getList (pageNo, pageSize) {
      console.log(pageNo)
      console.log(pageSize)
    },
    // 操作
    gotoCtrl (type, idx) {
      this.idx = idx;
      // 删除
      if (type === 0) {
        this.isEdit = false;
        this.tableList.data.splice(idx, 1)
      } else {
      // 修改
        this.isEdit = true;
        const data = JSON.parse(JSON.stringify(this.tableList.data[idx]))
        this.applyServer = {...getConfigInfo(), ...data}
        this.$refs.serverConfig.getEditData(this.applyServer);
        console.log(this.applyServer);
        this.popModal(true)
      }
    },
    // 点击添加按钮
    popModal (isEdit) {
      // 非编辑
      if (isEdit !== true) {
        this.configInfo.applyServer = getConfigInfo()
      }
      this.showModal = true
    },
    closeModal(){//关闭模态框
      this.showModal = false;
    },
    applySubmit(name) {
      this.$refs[name].handleSubmit("apply");
    },
    // 添加修改服务器确定按钮
    doAddServer (params) {
      // params.system = params.system.slice(10);
      params.disks.forEach((item,idx)=>{
        item.diskName = '数据磁盘' + (idx + 1);
      })
      console.log(params);
      // let applyServer = {
      //   cpuCount:params.cpuCount,
      //   memorySize:params.memorySize,
      //   system:params.system.slice(10),//删除ZDWH_czxt_
      //   netScope:params.netScope,
      //   netWide:params.netWide,
      //   gatewayDesc:params.gatewayDesc,
      //   sysDisksize:params.sysDisksize,
      //   applyCount: params.applyCount || 0,
      //   disks:params.disks
      // };
      // applyServer.disks = this.applyData(params.disks);
      if(!this.isEdit){//判断是否编辑服务器资源配置
        this.tableList.data.push(params);
      }else{
        this.$nextTick(() => {
          this.tableList.data.splice(this.idx, 1, params)
        })
      }
      this.showModal = false;
      console.log(this.tableList.data);
    },
    applyData(data){
      console.log(data);
      // data.splice(0,0, {diskName:'系统盘',diskSize:sysDisksize});//插入系统盘
      // data.splice(1,1);//删除
      data.forEach((item,index) => {
        console.log(item.diskSize);
        item.order = index;
        item.diskSize = item.diskSize;
        item.diskName = '数据磁盘' + (index);
        item.diskSize = item.diskSize;
      });
      return data
    },
    audit(){//审批事件触发
      this.auditModal = true;
    },
    closeAuditModal(){
      this.auditModal = false;
    },
    auditBtn(){//确定审批
      this.$refs['auditInfo'].validate((valid) => {
          if(valid) {
            this.auditInfo.applyKeyid = this.$route.params.departData.id;
            (this.auditInfo.passFlag == '通过') ? this.auditInfo.passFlag = 1 :this.auditInfo.passFlag = 2;
            console.log(this.auditInfo);
            api(softhardApiList.commApproveSubmit,this.auditInfo).then((res) => {
                console.log(res);
                if(res.data.errcode == 0) {
                  console.log("审批成功");
                  this.$router.go(-1);//返回上一页
                }else{
                    this.$Message.error(res.data.errmsg);
                }
              }, (error) => {})
              this.auditModal = false;
          }else{
            this.$Message.error('表单验证错误！');
          }
      })
    },
    resources(type){//处理事件跳转选择
      switch (type) {
        case 0:
          this.$router.push({//配置资源
            name: 'allocation',
            params: {table:this.tableList.data,departData:this.$route.params.departData}
          })
          break
        case 1://资源不足
          this.$router.push({
            name: 'addApply',
            params:{departData:this.$route.params.departData}
          })
          break
      }
    },
    submit(type,name){//保存申请服务器
      this.$refs[name].validate((valid) => {
        if(valid) {
          this.configInfo.type = type; //提交类型：1仅保存，2提交
          this.configInfo.applyServer = [];
          // this.tableList.data.forEach(item=>{
          //   if(item.system.indexOf('ZDWH_czxt_')==-1){
          //     item.system = 'ZDWH_czxt_' + item.system;//添加ZDWH_czxt_
          //   }
          // });
          if(this.tableList.data.length==0){
            this.$Message.error("申请服务器数据不能为0，请添加后再提交保存！");
            return;
          }
          this.configInfo.applyServer = this.tableList.data;
          this.configInfo.applyServer.forEach(item => {
            item.netWide = item.netWide.substr(0,item.netWide.length-1);
          });
          this.unitList.forEach(item => {
            if(item.id == this.configInfo.applyOrgid){
              this.configInfo.applyOrgname = item.name;
            }
          })
          console.log(this.configInfo);
          if(this.$route.params.id==3 || this.$route.params.id==2){ //重新填写和修改调用此接口
            this.configInfo.applyType = 1;
            api(softhardApiList.updateApplyManage,this.configInfo).then((res) => {
              console.log(res);
              if(res.data.errcode == 0) {
                this.$router.go(-1);//返回上一页
              }else{
                  this.$Message.error(res.data.errmsg);
              }
            }, (error) => {})
          }else{
            this.configInfo.applyType = this.$route.params.id;
            api(softhardApiList.saveMyApply,this.configInfo).then((res) => {
              console.log(res);
              if(res.data.errcode == 0) {
                this.$router.go(-1);//返回上一页
              }else{
                  this.$Message.error(res.data.errmsg);
              }
            }, (error) => {})
          }
        }else{
        }
      })
    },
    quit () {// 取消
      this.$router.go(-1)
    },
    downLoad(url,filename){//下载
      let urlDownload = "/api/file/file/download?url=" + url + "&filename=" + filename;
      window.open(urlDownload);
    },
    // 弹框需要调用的方法
    addDisk (len) {
      let diskItem = {diskSize:'', diskName:''};
      this.disks.push(diskItem);
    },
    handleRemove (idx) {
      this.disks.splice(idx,1);
    },
  },
  watch: {
    showModal(val) {
      if(!val) {
        this.$refs['serverConfig'].reload();
      }
    }
  }
}
</script>

<style lang='less'>
.server-list{
  span.handle{
    margin: 0 5px;
    display: inline-block;
    cursor: pointer;
    &:hover{
      color: #57a3f3;
    }
  }
}
.upload-list{
  margin-top: 8px;
  .upload-list-file{
    padding: 4px;
    color: #495060;
    border-radius: 4px;
    transition: background-color .2s ease-in-out;
    overflow: hidden;
    position: relative;
    span{
      cursor: pointer;
      transition: color .2s ease-in-out;
      i{
        display: inline-block;
        width: 12px;
        height: 12px;
        color: #495060;
        text-align: center;
      }
    }
    .upload-list-remove{
      opacity: 0;
      font-size: 18px;
      cursor: pointer;
      float: right;
      margin-right: 4px;
      color: #999;
      transition: all .2s ease;
    }
  }
}
.ivu-input-wrapper /deep/ .ivu-input-disabled{
  color:#797979;
}
.ivu-select-single  /deep/ .ivu-select-selection .ivu-select-selected-value{
  color:#797979;
}
</style>