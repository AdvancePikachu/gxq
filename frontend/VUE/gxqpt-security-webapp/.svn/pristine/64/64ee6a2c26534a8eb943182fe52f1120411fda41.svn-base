<template>
  <Layout>
    <Content>
      <Breadcrumb>
        <BreadcrumbItem>培训管理</BreadcrumbItem>
        <BreadcrumbItem>培训课程管理</BreadcrumbItem>
      </Breadcrumb>
      <Card>
        <Row>
          <Col span="6">
            <Tree :data="ztreeData" :render="renderContent" id="docClassify"></Tree>
          </Col>
          <Col span="16">
            <h3>培训信息</h3>
            <Form ref="formValidate" :label-width="100">
              <FormItem label="培训类别：">
                <Row>
                  <Col span="24">
                    <Input disabled></Input>
                  </Col>
                </Row>
              </FormItem>
              <FormItem label="培训名称：">
                <Row>
                  <Col span="24">
                    <Input :value="currentNodeInfo.title" disabled></Input>
                  </Col>
                </Row>
              </FormItem>
              <FormItem label="培训内容：">
                <Row>
                  <Col span="24">
                    <Input disabled type="textarea" :autosize="{minRows: 3,maxRows: 5}"></Input>
                  </Col>
                </Row>
              </FormItem>
            </Form>
          </Col>
        </Row>
      </Card>
      <Modal v-model="modal" @on-ok="saveOrUpdate">
        <Form ref="formValidate" inline :label-width="90">
          <template v-if="currentNodeInfo.level === 0">
            <FormItem label="新增类型" v-if="currentAct === actTypes.create">
              <Select v-model="modalFormData.status" style="width:150px;">
                <Option value="1">--新增子类--</Option>
                <Option value="2">--新增类--</Option>
              </Select>
            </FormItem>
            <template v-if="modalFormData.status == 1">
              <FormItem label="培训名称" style="width: 100%;">
                <Input
                  type="text"
                  v-model="modalFormData.name">
                </Input>
              </FormItem>
              <FormItem label="培训内容" style="width: 100%;">
                <Input
                  type="text"
                  v-model="modalFormData.context">
                </Input>
              </FormItem>
            </template>
            <template v-else>
              <FormItem label="培训类型" style="width: 100%;">
                <Input
                  type="text"
                  v-model="modalFormData.type">
                </Input>
              </FormItem>
            </template>
          </template>
          <template v-else>
            <FormItem label="培训名称" style="width: 100%;">
              <Input
                type="text"
                v-model="modalFormData.name">
              </Input>
            </FormItem>
            <FormItem label="培训内容" style="width: 100%;">
              <Input
                type="text"
                v-model="modalFormData.context">
              </Input>
            </FormItem>
          </template>
        </Form>
      </Modal>
    </Content>
  </Layout>
</template>

<script>
import {mapState} from 'vuex'
import api from '@/api/axiosApi'
import operationApiList from '@/api/operationApiList'
// 操作类型
const actTypes = {
  edit: 'edit',
  create: 'create'
}

function handleTreeData(data) {
  const treeData = []
  data.map(item => {
    const {level, children, type, id, parentId} = item
    if (level == 0) {
      treeData.push({
        id,
        children,
        parentId,
        title: type,
        level: 0
      })
    }
  })
  return treeData
}
export default {
  data() {
    return {
      // 操作类型
      actTypes,
      // 当前操作的类型
      currentAct: 'edit',
      // 当前操作的节点的信息
      currentNodeInfo: {
        // 自生的id
        id: '',
        // 父节点的id，如果没有父节点就为-1
        parentId: ''
      },
      // 当前操作节点的详细信息
      currentNodeDetail: {
        id: '',
        parentId: ''
      },
      // 新增或者编辑时的表单
      modalFormData: {
        // 子类或者同级类
        status: '',
        type: '',
        name: '',
        context: ''
      },
      ztreeData: [],
      buttonProps: {
        type: 'ghost',
        size: 'small',
      },
      modal: false
    }
  },
  computed: {
    saveOrUpdateUrl() {
      return this.currentAct === actTypes.create ? 'courseSave' : 'courseUpdate'
    },
    ...mapState(['authButton'])
  },
  methods: {
    // 获取树结构
    getTreeData() {
      const vm = this
      api(operationApiList.trainCourseTree)
      .then(res => {
        if (res.data.errcode === 0) {
          const treeData = handleTreeData(res.data.data)
          vm.ztreeData = JSON.parse(JSON.stringify(treeData).replace(/serviceName/g, 'title'))
        }
      }, error => {console.log(error)})
    },
    renderContent(h, { root, node, data }) {
      // 添加按钮
      const createBtn = h('Button', {
        props: {
          icon: 'plus',
          ...this.buttonProps
        },
        style: {
          marginRight: '8px',
          color: 'green'
        },
        on: {
          click: () => {
            this.modalFormData.type = ''
            this.modalFormData.status = ''
            this.currentNodeInfo = data
            this.currentAct = actTypes.create
            this.modal = true
          }
        }
      })
      // 编辑按钮
      const editBtn = h('Button', {
        props: {
          icon: 'edit',
          ...this.buttonProps
        },
        style: {
          marginRight: '8px',
          color: 'blue'
        },
        on: {
          click: () => {
            this.currentNodeInfo = data
            this.currentAct = actTypes.edit
            this.modal = true
            // this.getDetail()
          }
        }
      })
      // 删除按钮
      const deleteBtn = h('Button', {
        props: {
          icon: 'close',
          ...this.buttonProps
        },
        style: {
          marginRight: '8px',
          color: 'red'
        },
        on: {
          click: () => {
            this.currentNodeInfo = data
          }
        }
      })
      let btns = []
      if (data.level == 0) {
        if (vm.authButton.includes('ops_train_curriculum_manage_add')) {
          btns.push(createBtn)
        }
        if (vm.authButton.includes('ops_train_curriculum_manage_update')) {
          btns.push(editBtn)
        }
      // 第二层（培训名称）
      } else if (data.level == 1) {
        if (vm.authButton.includes('ops_train_curriculum_manage_update')) {
          btns.push(editBtn)
        }
        if (vm.authButton.includes('ops_train_curriculum_manage_delete')) {
          btns.push(deleteBtn)
        }
      } else {
        if (vm.authButton.includes('ops_train_curriculum_manage_add')) {
          btns.push(createBtn)
        }
        if (vm.authButton.includes('ops_train_curriculum_manage_update')) {
          btns.push(editBtn)
        }
        if (vm.authButton.includes('ops_train_curriculum_manage_delete')) {
          btns.push(deleteBtn)
        }
      }
      return h('span', {
        attrs: {
          class: 'doc-tree-title'
        }
      }, [
        h('span', {
          on: {
            click: () => {
              this.currentNodeInfo = data
              // this.getDetail()
            }
          },
          attrs: {
            class: 'title'
          }
        }, data.title),
        h('span', {
          attrs: {
            class: 'act-btns-container'
          }
        }, btns)
      ])
    },
    remove(root, node, data) {
      const parentKey = root.find(el => el === node).parent;
      const parent = root.find(el => el.nodeKey === parentKey).node;
      const index = parent.children.indexOf(data);
      parent.children.splice(index, 1);
    },
    // 保存或者更新节点信息
    saveOrUpdate() {
      // 此处缺少表单验证
      const vm = this
      const {parentId, id, level} = {...vm.currentNodeInfo}
      let data = {
        ...vm.modalFormData
      }
      // 编辑
      if (vm.currentAct === actTypes.edit) {
        data.id = id
      } else {
        // 新增子类
        debugger
        if (vm.modalFormData.status === '1' && level == 0) {
          data.pid = id
          data.level = level + 1
        } else {
          data.pid = parentId || -1
          data.level = level
        }
      }
      api(operationApiList[vm.saveOrUpdateUrl], data)
      .then(res => {
        if (res.data.errcode === 0) {
          vm.getTreeData()
          vm.currentNodeInfo = {}
        }
      }, error => {console.log(error)})
    }
  },
  mounted() {
    this.getTreeData()
  }
}
</script>

<style type="text/css" scoped>
  .w168 {
    width: 168px;
  }
</style>