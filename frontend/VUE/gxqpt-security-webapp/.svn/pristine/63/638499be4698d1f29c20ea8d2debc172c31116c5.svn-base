<!-- 环节配置 -->
<template>
	<Layout>
		<Content>
			<Breadcrumb>
				<BreadcrumbItem>{{ title }}</BreadcrumbItem>
			</Breadcrumb>
			<Card>
				<Form ref="formValidate" inline :label-width="110" :model="serverData">
          <FormItem label="环节名称：">
            <Input type="text" v-model="serverData.name" style="width:140px"></Input>
					</FormItem>
          <FormItem label="环节编码：">
            <Input type="text" v-model="serverData.code" style="width:140px"></Input>
					</FormItem>
					<!-- <FormItem label="报告年度：">
						 <DatePicker v-model="serverData.date" type="year" placeholder="请选择年份" style="width: 200px"></DatePicker>
					</FormItem> -->
          <FormItem label="监管方式：">
						<Select v-model="serverData.month" style="width:200px">
								<Option v-for="item in monthList" :value="item" :key="item">{{ item }}月</Option>
						</Select>
					</FormItem>
					<FormItem :label-width="20">
						<Button type="primary" @click="search">查询</Button>
						<Button type="primary" @click="addNew">新增</Button>
						<Button type="primary" @click="goback">返回</Button>
					</FormItem>
				</Form>
				<hy-table ref="selection" :data="data" :columns="columns" :total="pageOption.total" :page-size="pageOption.pageSize" @on-change="pageChange" @on-page-size-change="changePageSize" show-sizer show-elevator/>
			</Card>
      <Modal v-model="createModal" title="新建" width="40%">
        <Form ref="createForm" :model="createForm" :rules="createRule" :label-width="90">
          <FormItem label="环节名称" prop="name">
            <Input type="text" v-model="createForm.name" :disabled="disa" />
          </FormItem>
          <FormItem label="环节编码" prop="code">
            <Input type="text" v-model="createForm.code" :disabled="disa" />
          </FormItem>
          <FormItem label="责任人" prop="contactNumber">
            <Input type="number" v-model="createForm.contactNumber" :disabled="disa" />
          </FormItem>
          <FormItem label="确认人" prop="contactNumber">
            <Input type="number" v-model="createForm.contactNumber" :disabled="disa" />
          </FormItem>
          <FormItem label="抄送人" prop="copyUser">
            <Input type="number" v-model="createForm.copyUser" :disabled="disa" />
          </FormItem>
          <FormItem label="时长阈值" prop="timeLimit">
            <Input type="number" v-model="createForm.timeLimit" :disabled="disa" />
							<span slot="append">h</span>
						</Input>
          </FormItem>
          <FormItem label="提醒方式" :required="true" prop="remindType">
						<Select class="queryItem" clearable v-model="createForm.remindType">
							<Option value="1">消息</Option>
							<Option value="2">短信</Option>
						</Select>
          </FormItem>
          <FormItem label="环节备注" prop="desc">
            <Input type="number" v-model="createForm.desc" :disabled="disa" />
          </FormItem>
        </Form>
        <div slot="footer">
          <Button class="modalBtn" type="primary" @click="saveHostRoom" size="large">确定</Button>
          <Button class="modalBtn" type="default" @click="createModal = false" size="large">取消</Button>
        </div>
      </Modal>
		</Content>
	</Layout>
</template>

<script>
	import api from '@/api/axiosApi'
	import superviseApiList from '@/api/superviseApiList'
	import hyUpload from '@/components/hengyun/hyUpload'
	import { mapState } from 'vuex'
	function getCreateForm() {
		return {
			name:"",//环节名称
			code:"",//环节编码
			dutyUser:'',//责任人
			confirmUser:'',//确认人
			copyUser:'',//抄送人
			remindType:'',//提醒方式
			timeLimit:"",//时长限制
			desc:'',//备注
		}
	}
	export default {
		data() {
			return {
        title:this.$store.state.title,
				serverData: { //查询参数
					name:"",//环节名称
					code:"",//环节编码
				},
				modelType:'0',//0新增，1修改，2详情
				monthList:[1,2,3,4,5,6,7,8,9,10,11,12],
        createForm:{
					name:"",//环节名称
					code:"",//环节编码
					dutyUser:'',//责任人
					confirmUser:'',//确认人
					copyUser:'',//抄送人
					remindType:'',//提醒方式
					timeLimit:"",//时长限制
					desc:'',//备注
        },
        createModal:false,
        createRule: {
					name: [{required: true, message: '环节名称不能为空', trigger: 'blur'}],
					code: [{required: true, message: '环节编码不能为空', trigger: 'blur'}],
					dutyUser: [{required: true, message: '责任人不能为空', trigger: 'blur'}],
					confirmUser: [{required: true, message: '确认人不能为空', trigger: 'blur'}],
					remindType: [{required: true, message: '提醒方式不能为空', trigger: 'blur'}],
					timeLimit: [{required: true, message: '时长阈值不能为空', trigger: 'blur'}],
          date: [{
            required: true,
            trigger: 'blur',
            validator: (rule, value, cb) => {
							console.log(this.createForm.date);
              if (!this.createForm.date) {
                cb(new Error('年度选择不能为空'))
                return
              }
              cb()
            }
          }],
        },
				columns: [{
						type: 'index',
						title: '序号',
						width: 60,
						align: 'center'
					},
					{
						title: '报告年度',
						key: 'year'
          },
					{
						title: '报告月份',
						key: 'month'
          },
          {
						title: '报告文件',
						width: 300,
						key: 'fileName',
						render: (h, params) => {
							let fileArr = [];
							params.row.fileUrlArr.forEach((item,idx)=>{
								let mod = h('p', {
									style: {
										margin:'5px 0',
										color:'#2d8cf0',
										cursor:'pointer'
									},
									on: {
										click: () => {
											this.downloadFile(item,params.row.fileNameArr[idx]);										
										}
									}
								},params.row.fileNameArr[idx]);
								fileArr.push(mod)
							})
							return h('div', fileArr);
						}
					},
					{
						title: '报告大小',
						key: 'fileSize'
          },
          {
						title: '上传用户',
						key: 'createUserName'
					},
					{
						title: '上传时间',
						width: 220,
						align: 'center',
						key: 'createTime'
					},
					{
						title: '操作',
						key: 'act',
						width: 160,
						render: (h, params) => {
							const edit = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
										console.log(params);
										this.gotoCtrl(1, params.index)										
									}
								}
              },"修改");
              const moveUp = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
										console.log("上移");
									}
								}
              },"上移");
              const moveDown = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
										console.log("下移");
									}
								}
              },"下移");
              const detail = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
										console.log(params);
										this.gotoCtrl(2, params.index)										
									}
								}
              },"详情");
              const del = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
										this.itemDelete(params.row.id,params.index);										
									}
								}
							},"删除");
							return h('div', [edit,detail,moveUp,moveDown, del]);
						}
					}
				],
				data: [],
				pageOption: { //分页参数
					pageNo: 1,
					total: 0,
					pageSize: 10
				},
				sysVal: "",
			}
		},
		mounted() {
			console.log(this.$route.params.params);
			this.getAccrualLinkPage(); //查询服务分配管理分页
		},
		methods: {
			pageChange(num) { //页码改变的回调
				this.pageOption.pageNo = num;
				this.getAccrualLinkPage();
			},
			changePageSize(num) { //切换每页条数时的回调
				this.pageOption.pageSize = num;
				this.getAccrualLinkPage();
			},
			getAccrualLinkPage() { // 查询分页
				this.data = [];
				var formData = {
					"data": { ...this.serverData,
						powerSuperviseId:this.$route.params.params.id
					}, 
					"pageNo": this.pageOption.pageNo,
					"pageSize": this.pageOption.pageSize
				};
				api(superviseApiList.getAccrualLinkPage, formData).then((res) => {
					if(res.status == 200 && res.data.data) {
						this.data = res.data.data.list;
						if(this.data.length>0){
							this.pageOption.pageSize = res.data.data.pageSize;
							this.pageOption.total = res.data.data.total;
							this.pageOption.pageNo = res.data.data.pageNum;
							this.data.forEach(item=>{
								item.createTime = item.createTime.replace("-","年");
								item.createTime = item.createTime.replace("-","月");
								item.createTime = item.createTime.replace(" ","日 ");
								item.fileSize = (parseInt(item.fileSize/1048576)) + 'M';//计算MB大小
								item.fileNameArr = item.fileName.split(",");
								item.fileUrlArr = item.fileUrl.split(",");
							})
							console.log(this.data);
						};
					}
				}, (err) => {
					//dong something...
				})
			},
			search() {
				(this.serverData.date) ? this.serverData.year = this.serverData.date.getFullYear() : this.serverData.year='';
				console.log(this.serverData);
				this.getAccrualLinkPage();
      },	
      addNew(){
				console.log("新增");
				this.modelType = '0';
        this.createModal = true;
      },
      goback(){//返回
        this.$router.go(-1);
      },
      saveHostRoom(){
				let url = '';
				(this.modelType=='0') ? url = superviseApiList.saveAccrualLinkPage : url = superviseApiList.updateAccrualLinkPage;
				this.createForm.createTime = null;
				this.$refs['createForm'].validate((valid) => {
					if(valid) {
						this.createForm.year = this.createForm.date.getFullYear();
						this.createForm.hostMgId = this.$route.params.params.id;
						api(url, this.createForm).then((res) => {
							if(res.status == 200 && res.data.data) {
								if(res.data.data && res.data.errmsg == 'ok'){
									let msg = (this.modelType=='0') ? '保存成功！' : '编辑成功！';
									this.$Message.success(msg);
									this.getAccrualLinkPage();
								}else{
									this.$Message.error(res.data.errmsg);
								}
							}else{
								this.$Message.error(res.data.errmsg);
							}
						});
						this.createModal = false;
					}
				})
      },
			itemDelete(id,idx) {//删除
        const vm = this
        vm.$Modal.confirm({
          title: '删除确认',
          content: '确认删除此节点吗？',
          onOk: () => {
            api(superviseApiList.deleteAccrualLinkPage, {id: id}).then(res => {
              if (res.data.errcode === 0) {
                vm.$Message.success('删除成功！')
								vm.modal = false;
								vm.data.splice(idx, 1)
              }else{
								vm.$Message.error(res.data.errmsg)
							}
            }, error => {console.log(error)})
          }
        })
			},
			// 操作
			gotoCtrl (type, idx) {
				this.idx = idx;
				if(type==0){// 删除
					this.tableList.data.splice(idx, 1)
				}else{// 修改和详情
					const data = JSON.parse(JSON.stringify(this.data[idx]))
					this.createForm = {...getCreateForm(), ...data};
					console.log(this.createForm);
					this.createModal = true;
					(type==1) ?　this.modelType='1' : this.modelType='2';
				}
			},
			checkButton(code){//按钮权限
				if(this.authButton.indexOf(code) >= 0){
					return true;
				}else{
					return false;
				}
			}
		},
		computed: {
			...mapState([
				'authButton'
			]),
			disa(){
				return(this.modelType=="2") ?  true : false;
			}
		},
		components:{
			hyUpload
		},
	}
</script>

<style lang='less' scoped>
	.ivu-btn-small {
		margin: 0 3px;
	}
	.handle{
		color:red;
		cursor: pointer;
	}
	.queryItem {
		width: 200px;
	}
	.access-list {
		span.handle {
			margin: 0 5px;
			display: inline-block;
			cursor: pointer;
			&:hover {
				color: #57a3f3;
			}
		}
	}
</style>