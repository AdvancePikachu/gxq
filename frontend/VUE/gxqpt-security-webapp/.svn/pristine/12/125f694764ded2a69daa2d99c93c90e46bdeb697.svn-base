<template>
  <Layout>
    <Content>
      <Breadcrumb>
        <BreadcrumbItem>运维文档管理</BreadcrumbItem>
        <BreadcrumbItem>文档分类管理</BreadcrumbItem>
      </Breadcrumb>
      <Card>
        <Row>
          <Col span="6">
            <Tree :data="ztreeData" :render="renderContent" id="docClassify"></Tree>
          </Col>
          <Col span="16">
          <Form ref="formValidate" :label-width="100">
            <FormItem label="分类名称：">
              <Row>
                <Col span="24">
                  <Input :value="currentNodeDetail.name" disabled></Input>
                </Col>
              </Row>
            </FormItem>
            <!-- <FormItem label="创建时间：">
              <Row>
                <Col span="24">
                  <DatePicker type="date" disabled></DatePicker>
                </Col>
              </Row>
            </FormItem> -->
            <FormItem label="分类描述：">
              <Row>
                <Col span="24">
                  <Input type="textarea" :rows="5" disabled :value="currentNodeDetail.description"></Input>
                </Col>
              </Row>
            </FormItem>
          </Form>
          </Col>
        </Row>
      </Card>
      <Modal v-model="modal" :title="actTitle">
        <Form ref="modalForm" inline :label-width="90" :model="modalFormData" :rules="ruleValidate">
          <FormItem label="分类名称" prop="name">
            <Input type="text" v-model="modalFormData.name" style="width:150px;"></Input>
          </FormItem>
          <FormItem label="新增类型" v-if="currentAct === actTypes.create">
            <Select v-model="modalFormData.type" style="width:150px;">
              <Option value="1">--新增子类--</Option>
              <Option value="2">--新增类--</Option>
            </Select>
          </FormItem>
          <FormItem label="分类描述" style="width: 100%;">
            <Input
              type="textarea"
              v-model="modalFormData.description"
              :rows="5"
              :autosize="{minRows: 5, maxRows: 5}">
            </Input>
          </FormItem>
        </Form>
        <div slot="footer">
          <Button class="modalBtn" type="default" @click="modal = false" size="large">关闭</Button>
          <Button class="modalBtn" type="primary" @click="saveOrUpdate" size="large">确定</Button>
        </div>
      </Modal>
    </Content>
  </Layout>
</template>

<script>
import {mapState} from 'vuex'
import api from '@/api/axiosApi'
import operationApiList from '@/api/operationApiList'

// 操作类型
const actTypes = {
  edit: 'edit',
  create: 'create'
}

export default {
  data() {
    return {
      actTypes,
      modal: false,
      // 当前操作的类型
      currentAct: 'edit',
      // 当前操作的节点的信息
      currentNodeInfo: {
        // 自生的id
        id: '',
        // 父节点的id，如果没有父节点就为-1
        parentId: ''
      },
      // 当前操作节点的详细信息
      currentNodeDetail: {
        name: '',
        description: ''
      },
      // 新增或者编辑时的表单
      modalFormData: {
        name: '',
        type: '',
        description: ''
      },
      ruleValidate: {
        name: [{required: true, message: '不可为空', trigger: 'blur'}]
      },
      defaultMsg: '',
      config: {
        initialFrameWidth: null,
        initialFrameHeight: 350
      },
      displayType: "none",
      ztreeData: [],
      buttonProps: {
        type: 'ghost',
        size: 'small',
      }
    }
  },
  computed: {
    actTitle () {
      return this.currentAct === actTypes.edit ? '编辑分类' : '新增分类'
    },
    saveOrUpdateUrl() {
      return this.currentAct === actTypes.create ? 'classifySave' : 'classifyUpdate'
    },
    // 按钮权限列表
    ...mapState(['authButton'])
  },
  methods: {
    renderContent(h, { root, node, data }) {
      const vm = this
      // 添加按钮
      const createBtn = h('Button', {
        props: {
          icon: 'plus',
          ...this.buttonProps
        },
        style: {
          marginRight: '8px',
          color: 'green'
        },
        on: {
          click: () => {
            this.modalFormData.name = ''
            this.modalFormData.description = ''
            this.currentNodeInfo = data
            this.currentAct = actTypes.create
            this.modal = true
          }
        }
      })
      // 编辑按钮
      const editBtn = h('Button', {
        props: {
          icon: 'edit',
          ...this.buttonProps
        },
        style: {
          marginRight: '8px',
          color: 'blue'
        },
        on: {
          click: () => {
            this.currentNodeInfo = data
            this.currentAct = actTypes.edit
            this.modal = true
            this.getClassifyDetail()
          }
        }
      })
      // 删除按钮
      const deleteBtn = h('Button', {
        props: {
          icon: 'close',
          ...this.buttonProps
        },
        style: {
          marginRight: '8px',
          color: 'red'
        },
        on: {
          click: () => {
            this.currentNodeInfo = data
          }
        }
      })
      const btns = []
      if (vm.authButton.includes('ops_file_type_manage_add')) {
        btns.push(createBtn)
      }
      if (vm.authButton.includes('ops_file_type_manage_update')) {
        btns.push(editBtn)
      }
      // 如果有子节点，那就不能删除
      if (!data.children || data.children.length === 0) {
        if (vm.authButton.includes('ops_file_type_manage_delete')) {
          btns.push(deleteBtn)
        }
      }
      return h('span', {
        attrs: {
          class: 'doc-tree-title'
        }
      }, [
        h('span', {
          on: {
            click: () => {
              this.currentNodeInfo = data
              this.getClassifyDetail()
            }
          },
          attrs: {
            class: 'title'
          }
        }, data.title),
        h('span', {
          attrs: {
            class: 'act-btns-container'
          }
        }, btns)
      ])
    },
    // 获取树结构
    getTreeData() {
      const vm = this
      api(operationApiList.getClassifyTree).then(res => {
        if (res.data.errcode === 0) {
          this.ztreeData = JSON.parse(JSON.stringify(res.data.data).replace(/name/g, 'title'))
        }
      }, error => {console.log(error)})
    },
    // 保存或者更新节点信息
    saveOrUpdate() {
      // 此处缺少表单验证
      const vm = this
      vm.$refs.modalForm.validate(valid => {
        if (valid) {
          const {parentId, id} = {...vm.currentNodeInfo}
          let data = {
            ...vm.modalFormData
          }
          // 编辑
          if (vm.currentAct === actTypes.edit) {
            data.id = id
          } else {
            // 新增子类
            if (vm.modalFormData.type === '1') {
              data.parentId = id
            } else {
              data.parentId = parentId
            }
          }
          api(operationApiList[vm.saveOrUpdateUrl], data)
          .then(res => {
            if (res.data.errcode === 0) {
              vm.getTreeData()
              vm.currentNodeInfo = {}
            }
          }, error => {console.log(error)})
        } else {
          vm.$Message.warning('表单验证失败！')
        }
      })
    },
    // 获取文档分类的详细信息
    getClassifyDetail(node) {
      const vm = this
      api(operationApiList.getClassifyDetail, {
        id: vm.currentNodeInfo.id
      }).then(res => {
        if (res.data.errcode === 0) {
          vm.modalFormData.description = res.data.data.description
          vm.modalFormData.name = res.data.data.name
          vm.currentNodeDetail.description = res.data.data.description
          vm.currentNodeDetail.name = res.data.data.name
        }
      }, error => {console.log(error)})
    }
  },
  mounted() {
    this.getTreeData()
  }
}
</script>

<style type="text/css" scoped>
.w168 {
  width: 168px;
}
</style>

<style lang="less">
#docClassify{
  .doc-tree-title{
    display: inline-block;
    width: 100%;
    vertical-align: middle;
    .title{
      display: inline-block;
      height: 24px;
      float: left;
      line-height: 24px;
      cursor: pointer;
    }
    .act-btns-container{
      display: none;
      margin-left: 10px;
    }
    &:hover{
      .act-btns-container{
        display: inline-block;
      }
    }
  }
}

</style>
