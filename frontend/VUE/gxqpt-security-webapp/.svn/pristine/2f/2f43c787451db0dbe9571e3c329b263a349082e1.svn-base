<!-- 设备监控 -->
<template>
	<Layout>
		<Content>
			<Breadcrumb>
				<BreadcrumbItem>{{ title }}</BreadcrumbItem>
			</Breadcrumb>
			<Card>
				<Form ref="formValidate" inline :label-width="110" :model="serverData">
					<FormItem label="机房编号：">
             <Input type="text" v-model="serverData.roomNum" style="width:140px"></Input>
					</FormItem>
          <FormItem label="管理员：">
             <Input type="text" v-model="serverData.admin" style="width:140px"></Input>
					</FormItem>
          <FormItem label="联系电话：">
             <Input type="text" v-model="serverData.phone" style="width:140px"></Input>
					</FormItem>
					<FormItem label="主机数量：">
						<Input type="text" v-model="serverData.hostCount" style="width:140px"></Input>
					</FormItem>
					<FormItem :label-width="20">
						<Button type="primary" @click="search">查询</Button>
						<Button type="primary" @click="addNew">新增</Button>
					</FormItem>
				</Form>
				<hy-table ref="selection" :data="data" :columns="columns" :total="pageOption.total" :page-size="pageOption.pageSize" @on-change="pageChange" @on-page-size-change="changePageSize" show-sizer show-elevator/>
			</Card>
      <Modal v-model="createModal" title="机房信息" width="40%">
        <Form ref="createForm" :model="createForm" :rules="createRule" :label-width="90">
          <FormItem label="机房编号" prop="roomNum">
            <Input type="text" v-model="createForm.roomNum"/>
          </FormItem>
          <FormItem label="管理员" prop="admin">
            <Input type="text" v-model="createForm.admin"/>
          </FormItem>
          <FormItem label="联系电话" :required="true" prop="phone">
            <Input type="number" v-model="createForm.phone"/>
          </FormItem>
          <FormItem label="主机数量" :required="true" prop="hostCount">
            <Input type="number" v-model="createForm.hostCount"/>
          </FormItem>
          <FormItem label="路由器数量" :required="true" prop="routeCount">
            <Input type="number" v-model="createForm.routeCount"/>
          </FormItem>
          <FormItem label="空调数量" :required="true" prop="airConditioningCount">
            <Input type="number" v-model="createForm.airConditioningCount"/>
          </FormItem>
          <FormItem label="机柜数量" :required="true" prop="cabinetCount">
            <Input type="number" v-model="createForm.cabinetCount"/>
          </FormItem>
        </Form>
        <div slot="footer">
          <Button class="modalBtn" type="primary" @click="saveHostRoom" size="large">确定</Button>
          <Button class="modalBtn" type="default" @click="createModal = false" size="large">取消</Button>
        </div>
      </Modal>
		</Content>
	</Layout>
</template>

<script>
	import api from '@/api/axiosApi'
	import softhardApiList from '@/api/softhardApiList'
	import { mapState } from 'vuex'
	export default {
		data() {
			return {
        title:this.$store.state.title,
        serverData: { //查询参数
          roomNum:"",
          phone:"",
					admin: "",
					memorySize: "",
					diskSize: "",
        },
        createForm:{
          roomNum:'',
          admin:'',
          phone:'',
          hostCount:'',
          routeCount:'',
          airConditioningCount:'',
          cabinetCount:'',
        },
        createModal:false,
        createRule: {
          roomNum: [{required: true, message: '不可为空', trigger: 'blur'}],
          admin: [{required: true, message: '不可为空', trigger: 'blur'}],
          phone: [{required: true, message: '不可为空', trigger: 'blur'}],
          hostCount: [{required: true, message: '不可为空', trigger: 'blur'}],
          routeCount: [{required: true, message: '不可为空', trigger: 'blur'}],
          airConditioningCount: [{required: true, message: '不可为空', trigger: 'blur'}],
          cabinetCount: [{required: true, message: '不可为空', trigger: 'blur'}],
        },
				columns: [{
						type: 'index',
						title: '序号',
						width: 60,
						align: 'center'
					},
					{
						title: '机房编号',
						key: 'serverIp'
          },
					{
						title: '管理员',
						key: 'manageUname'
          },
          {
						title: '联系电话',
						key: 'manageAccount'
					},
					{
						title: '主机数量',
						key: 'memorySize'
          },
          {
						title: '路由器数量',
						key: 'memoryPercent'
					},
					{
						title: '空调数量',
						key: 'diskSize'
					},
					{
						title: '机柜数量',
						key: 'diskPercent'
					},
					{
						title: '创建时间',
						width: 220,
						align: 'center',
						key: 'createTime'
					},
					{
						title: '操作',
						key: 'act',
						width: 160,
						render: (h, params) => {
							const look = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_pzbg')?'inline-block':'none'
								// },
								on: {
									click: () => {//跳转到报告查看
                    this.$router.push({
                      name: 'reportView',
                      params: {params: params}
                    })
									}
								}
							}, '查看报告');
							const edit = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
                    this.$ref.createForm.resetFields();
                    this.createForm = params;
                    this.createModal = true;
									}
								}
              },"修改");
              const del = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
                    this.itemDelete(params.row.id);								
									}
								}
							},"删除");
							return h('div', [look, edit, del]);
						}
					}
				],
				data: [],
				pageOption: { //分页参数
					current: 1,
					total: 0,
					pageSize: 10
				},
				sysVal: "",
			}
		},
		mounted() {
			this.servermanagerPage(); //查询服务分配管理分页
			console.log(this.$store.state);
		},
		methods: {
			handleChange(value, selecteddata) {
				if(selecteddata.length>0){
					let val = selecteddata.map(o => o.value).reverse();
					this.serverData.system = val[0];
				}else{
					this.serverData.system = "";
				}
			},
			pageChange(num) { //页码改变的回调
				this.pageOption.current = num;
				this.servermanagerPage();
			},
			changePageSize(num) { //切换每页条数时的回调
				this.pageOption.pageSize = num;
				this.servermanagerPage();
			},
			servermanagerPage() { // 查询服务分配管理分页
				this.data = [];
				var formData = {
					"data": { ...this.serverData
					}, //Object.assign({}, this.searchCondition),
					"pageNo": this.pageOption.current,
					"pageSize": this.pageOption.pageSize
				};
				api(softhardApiList.servermanagerPage, formData).then((res) => {
					if(res.status == 200 && res.data.data) {
						this.data = res.data.data.list;
						if(this.data.length>0){
							this.pageOption.pageSize = res.data.data.pageSize;
							this.pageOption.total = res.data.data.total;
							this.pageOption.current = res.data.data.pageNum;
							this.data.forEach(item=>{
								item.openTime = item.openTime.replace("-","年");
								item.openTime = item.openTime.replace("-","月");
								item.openTime = item.openTime.replace(" ","日 ");
								item.updateTime = item.updateTime.replace("-","年");
								item.updateTime = item.updateTime.replace("-","月");
								item.updateTime = item.updateTime.replace(" ","日 ");
							})
						};
					}
				}, (err) => {
					//dong something...
				})
			},
			search() {
				console.log(this.serverData);
				this.servermanagerPage();
      },	
      addNew(){
        console.log("新增");
        this.$ref.createForm.resetFields();
        this.createModal = true;
      },
      saveHostRoom(){
        console.log("保存机房信息")
      },
      itemDelete(id) {//删除
        const vm = this
        vm.$Modal.confirm({
          title: '删除确认',
          content: '确认删除此节点吗？',
          onOk: () => {
            api(operationApiList.serviceDelete, {
              id: id
            }).then(res => {
              if (res.data.errcode === 0) {
                vm.$Message.success('删除成功！')
                changeTreeData({
                  root: vm.treeRoot,
                  node: vm.currentNode,
                  data: vm.currentNodeInfo,
                  type: 'delete'
                })
                vm.modal = false
              }
            }, error => {console.log(error)})
          }
        })
      },
			// 操作
			gotoCtrl(idx,data) {
				// 配置变更
				if(idx === 2) {
					this.$router.push({
						name: 'modify',
						params: {id: idx,departData:data}
					})
				} else { // 详情
					this.$router.push({
						path: '/department/detail'
					})
				}
			},
			checkButton(code){
				if(this.authButton.indexOf(code) >= 0){
					return true;
				}else{
					return false;
				}
			}
		},
		computed: {
			...mapState([
				'authButton'
			])
		},
	}
</script>

<style lang='less' scoped>
	.ivu-btn-small {
		margin: 0 3px;
	}
	.handle{
		color:red;
		cursor: pointer;
	}
	.queryItem {
		width: 200px;
	}
	.access-list {
		span.handle {
			margin: 0 5px;
			display: inline-block;
			cursor: pointer;
			&:hover {
				color: #57a3f3;
			}
		}
	}
</style>