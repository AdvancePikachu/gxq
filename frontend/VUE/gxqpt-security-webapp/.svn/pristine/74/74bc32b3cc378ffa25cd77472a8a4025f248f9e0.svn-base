<template>
	<Layout>
		<Content>
			<Breadcrumb>
				<BreadcrumbItem>运维文档管理</BreadcrumbItem>
				<BreadcrumbItem>文档分类管理</BreadcrumbItem>
			</Breadcrumb>
			<Card>
				<Row>
					<Col span="6">
					<Tree :data="ztreeData" :render="renderContent"></Tree>
					</Col>
					<Col span="16">
					<Form ref="formValidate" :model="formValidate" :rules="ruleValidate" :label-width="100">
						<FormItem label="分类名称：">
							<Row>
								<Col span="24">
								<Input></Input>
								</Col>
							</Row>
						</FormItem>
						<FormItem label="创建时间：">
							<Row>
								<Col span="24">
								<DatePicker type="date"> </DatePicker>
								</Col>
							</Row>
						</FormItem>
						<FormItem label="分类描述：">
							<Row>
								<Col span="24">
								<Input type="textarea" :rows="5"></Input>
								</Col>
							</Row>
						</FormItem>
					</Form>
					</Col>
				</Row>
			</Card>
		</Content>
	</Layout>
</template>

<script>
	export default {
		data() {
			return {
				formValidate: {},
				ruleValidate: {},
				defaultMsg: '',
				config: {
					initialFrameWidth: null,
					initialFrameHeight: 350
				},
				displayType: "inline-block",
				ztreeData: [],
				buttonProps: {
					type: 'ghost',
					size: 'small',
				}
			}
		},
		methods: {
			init() {

			},
			renderContent(h, {
				root,
				node,
				data
			}) {
				return h('span', {
					on: {
						mouseenter: (e) => {
							this.mouseenterNode(root, node, data);
						},
						mouseleave: (e) => {
							this.mouseleaveNode(root, node, data);
						},
					},
					style: {
						display: 'inline-block',
						width: '100%'
					}
				}, [
					h('span', [
						h('Icon', {
							props: {},
							style: {
								marginRight: '8px'
							}
						}),
						h('span',{
							style: {
								display: 'inline-block',
							    height: '24px',
							    float: 'left',
							    lineHeight: '24px'
							}
						}, data.title)
					]),
					h('span', {
						style: {
							marginLeft: '10px',
							display: data.displayType
						}
					}, [
						h('Button', {
							props: Object.assign({}, this.buttonProps, {
								icon: 'plus'
							}),
							style: {
								marginRight: '8px',
								color: 'green'
							},
							on: {
								click: () => {
									this.append(data)
								}
							}
						}),
						h('Button', {
							props: Object.assign({}, this.buttonProps, {
								icon: 'edit'
							}),
							style: {
								marginRight: '8px',
								color: 'blue'
							},
							on: {
								click: () => {
									this.append(data)
								}
							}
						}),
						h('Button', {
							props: Object.assign({}, this.buttonProps, {
								icon: 'close'
							}),
							style: {
								marginRight: '8px',
								color: 'red',
								display: data.rootNode||"inline-block"
							},
							on: {
								click: () => {
									this.remove(root, node, data)
								}
							}
						})
					])
				]);
			},
			append(data) {
				const children = data.children || [];
				children.push({
					title: 'appended node',
					expand: true
				});
				this.$set(data, 'children', children);
			},
			remove(root, node, data) {
				const parentKey = root.find(el => el === node).parent;
				const parent = root.find(el => el.nodeKey === parentKey).node;
				const index = parent.children.indexOf(data);
				parent.children.splice(index, 1);
			},
			mouseenterNode(root, node, data) {
				data.displayType='inline-block';
			},
			mouseleaveNode(root, node, data) {
				data.displayType='none';
			},
			getData(data){
				if(data && data.length>0){
					for(const i in data){
						data[i].displayType="none";
						if(data[i].children && data[i].children.length>0){
							this.getData(data[i].children);
						}
					}
				};
				return data;
			}
		},
		mounted() {
			this.$nextTick(() => {
				this.init();
			});
			const datas = [{
							title: '制度文档',
							expand: true,
							children: [{
									title: '运维制度',
									expand: true,
								},
								{
									title: '运维制度',
									expand: true,
								}
							]
						},
						{
							title: '流程文档',
							expand: true,
							children: [{
									title: '运维服务流程',
									expand: true,
								},
								{
									title: '运维服务流程',
									expand: true,
								}
							]
						}
					];
			this.ztreeData = [{
					title: '文档分类',
					expand: true,
					rootNode: 'none',
					displayType: "none",
					children: this.getData(datas)
				}]
		}
	};
</script>

<style type="text/css" scoped>
	.w168 {
		width: 168px;
	}
</style>