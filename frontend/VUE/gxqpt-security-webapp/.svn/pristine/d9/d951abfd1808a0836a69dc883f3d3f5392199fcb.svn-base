<template>
	<Layout>
		<Content>
			<Breadcrumb>
				<BreadcrumbItem>培训管理</BreadcrumbItem>
				<BreadcrumbItem>培训审核</BreadcrumbItem>
			</Breadcrumb>
			<Card>
				<Form :model="searchCondition" ref="searchformData" inline :label-width="80">
                    <FormItem label="培训时间" prop="serviceDate">
						<DatePicker type="daterange" v-model="trainTime" show-week-numbers placement="bottom-end" placeholder="请选择培训时间" style="width: 200px"></DatePicker>
					</FormItem>
                    <FormItem label="培训类别" prop="type">
                        <Select v-model="searchCondition.type" style="width: 140px;">
                            <Option value="">全部</Option>
							<Option value="类别1">类别1</Option>
							<Option value="类别2">类别2</Option>
						</Select>
                    </FormItem>
                    <FormItem label="培训名称" prop="name">
                        <Input v-model="searchCondition.name" style="width: 140px;"></Input>
					</FormItem>
                    <FormItem label="培训内容" prop="context">
                        <Input v-model="searchCondition.context" style="width: 140px;"></Input>
					</FormItem>
                    <FormItem label="提交单位" prop="company">
						<Select v-model="searchCondition.company" style="width: 140px;">
                            <Option value="">全部</Option>
							<Option value="单位1">单位1</Option>
							<Option value="单位2">单位2</Option>
							<Option value="单位3">单位3</Option>
						</Select>
					</FormItem>
                    <FormItem label="提交人" prop="person">
						<Select v-model="searchCondition.person" style="width: 140px;">
                            <Option value="">全部</Option>
							<Option value="张三">张三</Option>
							<Option value="李四">李四</Option>
						</Select>
					</FormItem>
					<FormItem label="状态" prop="status">
						<Select v-model="searchCondition.status" style="width: 140px;">
                            <Option value="">全部</Option>
                            <Option :value="1">申请</Option>
                            <Option :value="2">驳回</Option>
                            <Option :value="3">同意</Option>
                            <Option :value="4">驳回后申请</Option>
                            <Option :value="5">完结</Option>
                        </Select>
					</FormItem>
					<FormItem>
						<Button type="info" @click="search" v-if="authButton.includes('ops_train_audit_query')">查询</Button>
					</FormItem>
				</Form>
                <hy-table
                    highlight-row
                    border
                    :columns="tableList.columns"
                    :data="tableList.data"
                    :total="Number(pageInfo.total)"
                    :pageSize="Number(pageInfo.pageSize)"
                    pageType="small"
                    show-elevator
                    show-sizer
                    ref="thisTable"
                    @on-page-change="search" />
                <Modal v-model="dealDetailModal" title="审批处理" class-name="vertical-center-modal" width="40%">
                    <div style="text-align:center">
                        <Form ref="evalData" :model="checkInfo" :label-width="90" class="clearfix">
                            <FormItem label="处理方案">
                                <RadioGroup v-model="checkInfo.status" style="float: left;">
                                    <Radio :label="0">同意</Radio>
                                    <Radio :label="1">驳回</Radio>
                                </RadioGroup>
                            </FormItem>
                            <template v-if="checkInfo.status === 0">
                                <FormItem label="处理意见">
                                    <Input v-model="checkInfo.advice" type="textarea" :autosize="{minRows: 5,maxRows: 8}" placeholder="请输入处理意见..."></Input>
                                </FormItem>
                                <FormItem label="培训人">
                                    <div class="ivu-form-item-content" @click="openTreeModal(false)">
                                        <div class="ivu-input-wrapper ivu-input-type">
                                            <i class="ivu-icon ivu-icon-load-c ivu-load-loop ivu-input-icon ivu-input-icon-validate"></i>
                                            <div class="ivu-input" style="width: 100%;">{{trainerInfo.title}}</div>
                                        </div>
                                    </div>
                                </FormItem>
                                <FormItem label="协助人">
                                    <div class="ivu-form-item-content" @click="openTreeModal(true)">
                                        <div class="ivu-input-wrapper ivu-input-type">
                                            <i class="ivu-icon ivu-icon-load-c ivu-load-loop ivu-input-icon ivu-input-icon-validate"></i>
                                            <div class="ivu-input" style="width: 100%;">{{assistantNames.join(',')}}</div>
                                        </div>
                                    </div>
                                </FormItem>
                            </template>
                            <template v-else-if="checkInfo.status === 1">
                                <FormItem label="驳回理由">
                                    <Input v-model="checkInfo.advice" type="textarea" :autosize="{minRows: 5, maxRows: 8}"></Input>
                                </FormItem>
                            </template>
                        </Form>
                    </div>
                    <div slot="footer">
                        <Button type="primary" @click="doCheck" size="large">确定</Button>
                        <Button type="default" @click="dealDetailModal = false" size="large">取消</Button>
                    </div>
                </Modal>
                <!-- 选择培训人的树形弹窗 -->
                <personTreeModal ref="getTrainer" :multiple="isAssitantSelect" @on-ok="selectPerson" />
			</Card>
		</Content>
	</Layout>
</template>
<script>
import {mapState} from 'vuex'
import api from '@/api/axiosApi'
import operationApiList from '@/api/operationApiList'

import personTreeModal from './trainModal/personTreeModal.vue'

function getDateRange(time) {
  if (!time) {
    return ''
  }
  // 结束日期
  const endDate = new Date(time)
  // 当前日期往前推30天
  const startDate = new Date(time - 30 * 24 * 60 * 60 * 1000)
  return {
    start: `${startDate.getFullYear()}-${startDate.getMonth() + 1}-${startDate.getDate()}`,
    end: `${endDate.getFullYear()}-${endDate.getMonth() + 1}-${endDate.getDate()}`
  }
}

export default {
    components: {
        personTreeModal
    },
    data() {
        const vm = this
        const date = getDateRange(Date.now())
        return {
            // 当前弹框选择的是培训人还是协助人
            isAssitantSelect: false,
            // 当前操作的培训行信息
            currentInfo: {},
            dealDetailModal: false,
            searchCondition: {
                type: '',
                name: '',
                context: '',
                company: '',
                person: '',
                status: ''
            },
            checkInfo: {
                // 培训意见
                advice: '',
                // 是否同意1驳回0同意
                status: ''
            },
            // 培训人的信息
            trainerInfo: {
                title: '',
                id: ''
            },
            // 协助人名单
            assistantList: [],
            // 培训时间的数组
            trainTime: [date.start, date.end],
            tableList: {
                columns: [{
                    title: '序号',
                    type: 'index',
                    width: 80,
                    align: 'center'
                }, {
                    title: '培训名称',
                    key: 'name'
                }, {
                    title: '培训类别',
                    key: 'type'
                }, {
                    title: '培训时间',
                    key: 'trainTime'
                }, {
                    title: '提交单位',
                    key: 'company'
                }, {
                    title: '提交人',
                    key: 'person'
                }, {
                    title: '状态',
                    key: 'status',
                    render: (h, params) => {
                        const status = ['--', '申请', '驳回', '同意', '驳回后申请', '完结']
                        return h('span', status[params.row.status])
                    }
                }, {
                    title: '培训评分',
                    key: 'trainSorce'
                }, {
                    title: '培训反馈文件',
                    key: 'fileUrl',
                    align: 'center',
                    render: (h, params) => {
                        const {documentId, id} = params.row
                        const {userId, token} = vm.$store.state.userInfo
                        if (documentId && vm.authButton.includes('ops_train_audit_download')) {
                            return h('a', {
                                attrs: {
                                    href: `/api/file/p/file/down?id=${documentId}&userId=${userId}&token=${token}`,
                                    target: '_blank'
                                }
                            }, [
                                h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    }
                                }, '下载'),
                            ])
                        } else {
                            return h('span', '--')
                        }
                    }
                }, {
                    title: '操作',
                    type: 'act',
                    width: 200,
                    align: 'center',
                    render: (h, params) => {
                        const deal = h('Button', {
                            props: {
                                type: 'primary',
                                size: 'small'
                            },
                            style: {
                                marginRight: '5px'
                            },
                            on: {
                                click: () => {
                                    vm.dealDetailModal = true
                                }
                            }
                        }, '处理')
                        const detail = h('Button', {
                            props: {
                                type: 'primary',
                                size: 'small'
                            },
                            style: {
                                marginRight: '5px'
                            },
                            on: {
                                click: () => {
                                    vm.$router.push({name: 'trainDetail', query: {id: params.row.id}})
                                }
                            }
                        }, '详情')
                        const btns = []
                        if (vm.authButton.includes('ops_train_audit_handle')) {
                            btns.push(deal)
                        }
                        if (vm.authButton.includes('ops_train_audit_detail')) {
                            btns.push(detail)
                        }
                        return h('div', btns)
                    }
                }],
                data: []
            },
            pageInfo: {
                pageNo: 1,
                pageSize: 10,
                total: 0
            }
        }
    },
    computed: {
        assistantNames () {
            const names = []
            this.assistantList.map(item => {
                names.push(item.title)
            })
            return names
        },
        ...mapState(['authButton'])
    },
    mounted () {
        this.search()
    },
    methods: {
        // 搜索列表
        doSearch(pageNo, pageSize) {
            const vm = this
            const endTime = getDateRange(vm.trainTime[1]).end
            const startTime = getDateRange(vm.trainTime[0]).end
            api(operationApiList.trainAuditorPage, {
                pageNo: pageNo || vm.pageInfo.pageNo,
                pageSize: pageSize || vm.pageInfo.pageSize,
                data: vm.searchCondition,
                createTimeEnd: endTime ? `${endTime} 23:59:59` : '',
                createTimeStart: startTime ? `${startTime} 00:00:00` : ''
            }).then(res => {
                if (res.data.errcode === 0) {
                    const result = res.data.data
                    vm.pageInfo.pageNo = result.pageNum
                    vm.pageInfo.total = result.total
                    vm.tableList.data = result.list
                }
            }, error => {console.log(error)})
        },
        search() {
            this.doSearch()
        },
        // 审批
        doCheck() {
            const vm = this
            let data = {}
            // 同意
            if (vm.checkInfo.status === 0) {
                const assistant = []
                vm.assistantList.map(item => {
                    assistant.push({
                        id: item.id,
                        name: item.title
                    })
                })
                data = {
                    // 培训人id
                    trainerId: vm.trainerInfo.id,
                    // 培训人姓名
                    trainer: vm.trainerInfo.title,
                    // 协助人
                    assistant: assistant,
                    ...vm.checkInfo
                }
            } else {
                data = vm.checkInfo
            }
            api(operationApiList.trainHandleApply, {
                // 培训id
                id: vm.currentInfo.id,
                ...data
            }).then(res => {
                if (res.data.errcode === 0) {
                    vm.$Message.success('处理成功！！！')
                    vm.dealDetailModal=  false
                    vm.search()
                }
            }, error => {console.log(error)})
        },
        // 打开树形结构，选择人员
        openTreeModal(isAssitantSelect) {
            this.isAssitantSelect = isAssitantSelect
            this.$refs.getTrainer.open()
        },
        // 选择人员之后的回调
        selectPerson(list) {
            if (this.isAssitantSelect) {
                this.assistantList = list
            } else {
                this.trainerInfo = list[0]
            }
        }
    }
}
</script>
<style lang="less" scoped="scoped">
	.act-btn-group{
		button{
			margin: 0 12px;
		}
    }
</style>