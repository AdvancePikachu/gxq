<template>
	<Layout>
		<Content>
			<Breadcrumb>
				<BreadcrumbItem>国信优易</BreadcrumbItem>
				<BreadcrumbItem>基础数据维护</BreadcrumbItem>
			</Breadcrumb>
			<Card>
				<Row>
					<Col span="6">
					    <Tree :data="ztreeData" :render="renderContent"></Tree>
					</Col>
					<Col span="16">
                    <h3>服务信息</h3>
					<Form ref="formValidate" :model="formValidate" :rules="ruleValidate" :label-width="100">
						<FormItem label="服务类别：">
							<Row>
								<Col span="24">
								    <Input disabled></Input>
								</Col>
							</Row>
						</FormItem>
                        <FormItem label="服务对象：">
							<Row>
								<Col span="24">
								    <Input disabled></Input>
								</Col>
							</Row>
						</FormItem>
                        <FormItem label="服务分类：">
							<Row>
								<Col span="24">
								    <Input disabled></Input>
								</Col>
							</Row>
						</FormItem>
                        <FormItem label="服务名称：">
							<Row>
								<Col span="24">
								    <Input disabled></Input>
								</Col>
							</Row>
						</FormItem>
                        <FormItem label="服务简介：">
							<Row>
								<Col span="24">
								    <Input disabled></Input>
								</Col>
							</Row>
						</FormItem>
                        <FormItem label="服务成果：">
							<Row>
								<Col span="24">
								    <Input disabled></Input>
								</Col>
							</Row>
						</FormItem>
					</Form>
					</Col>
				</Row>
			</Card>
		</Content>
		<Modal v-model="basisModal" title="添加" class-name="vertical-center-modal" width="60%">
			<div style="text-align:center">
				<Form ref="evalData" :model="evalData" :rules="ruleValidate" :label-width="70">
					<Row :gutter="40">
						<Col span="12">
							<FormItem label="名称" label-position="left" prop="name">
								<Input v-model="evalData.name"></Input>
							</FormItem>
						</Col>
						<Col span="22">
							<FormItem label="描述" label-position="left" prop="desc">
								<Input v-model="evalData.desc" type="textarea" :autosize="{minRows: 2,maxRows: 5}" placeholder="请输入描述..."></Input>
							</FormItem>
						</Col>
					</Row>
				</Form>
			</div>
			<div slot="footer">
				<Button type="primary" @click="handleSubmit" size="large">确定</Button>
				<Button type="default" @click="closeModal" size="large">取消</Button>
			</div>
		</Modal>
	</Layout>
</template>

<script>
import api from '@/api/axiosApi'
import softhardApiList from '@/api/softhardApiList'
export default {
	data() {
		return {
			formValidate: {},
			ruleValidate: {},
			defaultMsg: '',
			config: {
				initialFrameWidth: null,
				initialFrameHeight: 350
			},
			parentId:'',
			displayType: "inline-block",
			ztreeData:[],
			itemData:{},
			parent:{
				id:'100'
			},
			basisModal:false,
			evalData:{},
			// ztreeData: [{
			// 	title: '硬件运维服务',
			// 	expand: true,
			// 	displayType: 'none',
			// 	rootNode: 'none',
			// 	children: [{
			// 			title: '网络运维服务',
			// 			expand: true,
			// 			displayType: 'none',
			// 			children: [{
			// 					title: '例行操作',
			// 					expand: true,
			// 					displayType: 'none',
			// 				},
			// 				{
			// 					title: '网络设备巡检服务',
			// 					expand: true,
			// 					displayType: 'none',
			// 				}
			// 			]
			// 		},
			// 		{
			// 			title: '主机运维服务',
			// 			expand: true,
			// 			displayType: 'none',
			// 			children: [{
			// 					title: '响应支持',
			// 					expand: true,
			// 					displayType: 'none',
			// 				},
			// 				{
			// 					title: '网络设备性能评估',
			// 					expand: true,
			// 					displayType: 'none',
			// 				}
			// 			]
			// 		}
			// 	]
			// }],
			buttonProps: {
				type: 'ghost',
				size: 'small',
			}
		}
	},
	mounted(){
		this.init();
	},
	methods: {
		init() {
			this.findDictionaryTypeList();
		},
		renderContent(h, {
			root,
			node,
			data
		}) {
			return h('span', {
				on: {
					mouseenter: (e) => {
						this.mouseenterNode(root, node, data);
					},
					mouseleave: (e) => {
						this.mouseleaveNode(root, node, data);
					},
				},
				style: {
					display: 'inline-block',
					width: '100%'
				}
			}, [
				h('span', [
					h('Icon', {
						props: {},
						style: {
							marginRight: '8px'
						}
					}),
					h('span',{
						style: {
							display: 'inline-block',
							height: '24px',
							float: 'left',
							lineHeight: '24px'
						},
						on: {
							click: () => {
								console.log(data);
							}
						}
					}, data.name)
				]),
				h('span', {
					style: {
						display: data.displayType,
						marginLeft: '10px',
						float:'left'
					}
				}, [
					h('Button', {
						props: Object.assign({}, this.buttonProps, {
							icon: 'plus'
						}),
						style: {
							marginRight: '8px',
							color: 'green',
							float:'left'
						},
						on: {
							click: () => {
								console.log('新增');
								console.log(data);
								this.openModal(data);
								// this.append(data)
							}
						}
					}),
					h('Button', {
						props: Object.assign({}, this.buttonProps, {
							icon: 'edit'
						}),
						style: {
							marginRight: '8px',
							color: 'blue',
							float:'left'
						},
						on: {
							click: () => {
								console.log('修改');
								this.append(data)
							}
						}
					}),
					h('Button', {
						props: Object.assign({}, this.buttonProps, {
							icon: 'close'
						}),
						style: {
							marginRight: '8px',
							color: 'red',
							float:'left',
							display: data.rootNode||"inline-block"
						},
						on: {
							click: () => {
								console.log("删除");
								this.remove(root, node, data)
							}
						}
					})
				])
			]);
		},
		append(data) {
			const children = data.children || [];
			children.push({
				title: 'appended node',
				expand: true
			});
			this.$set(data, 'children', children);
		},
		remove(root, node, data) {
			const parentKey = root.find(el => el === node).parent;
			const parent = root.find(el => el.nodeKey === parentKey).node;
			const index = parent.children.indexOf(data);
			parent.children.splice(index, 1);
		},
		mouseenterNode(root, node, data) {
			console.log("1");
			data.displayType = 'none';
			// this.$set(data, 'displayType' ,'block');
			console.log(data);
		},
		mouseleaveNode(root, node, data) {
			console.log("2");
			// this.$set(data, 'displayType' ,'none');
		},
		openModal(data){
			this.basisModal = true;
			this.parent = data;
		},
		closeModal(){
			this.parent = {};
			console.log("关闭");
			this.basisModal = false;
			console.log(this.basisModal);
		},
		findDictionaryTypeList(){//获取全部列表数据
			api(softhardApiList.findDictionaryTypeList,{"parentId": this.parent.id}).then((res) => {
				if(res.data.errcode == 0) {
					// this.ztreeData = res.data.data;
					let data = res.data.data;
					// for(var i = 0;i<data.length;i++){
					// 	if(data[i].parentId==-100){
					// 		this.ztreeData.push(data[i]);//父级列表生成
					// 	}else{
					// 		for(var j = 0;j<firstData.length;j++){//父级树参数配置
					// 				this.ztreeData[i].expand = true;
					// 				this.ztreeData[i].displayType = 'block';
					// 				this.ztreeData[i].rootNode = 'none';
					// 				this.ztreeData[i].children = [];
					// 			if(data[i].parentId == this.ztreeData[i].id){//对应父级ID遍历子级数据
					// 				this.ztreeData[i].children.push(data[i]);
					// 			}else{
					// 				console.log(没有更多);
					// 			}
					// 		}
					// 		console.log(firstData);
					// 	}
					// }
					// for(var i = 0;i<this.ztreeData.length;i++){
					// 	this.ztreeData[i].expand = true;
					// 	this.ztreeData[i].displayType = 'block';
					// 	this.ztreeData[i].rootNode = 'none';
					// 	this.ztreeData[i].children = [];
					// }
				} else {
				console.log(res.data.errmsg);
				}
			}, (error) => {})
		},
		handleSubmit(){
			let data = {
				"code": this.parent.code,
				"description": this.evalData.desc,
				"name": this.evalData.name,
				"parentId": this.parent.id
			}
			this.saveDictionaryType(data);
		},
		saveDictionaryType(data){//保存数据
			console.log(data);
			api(softhardApiList.saveDictionaryType,data).then((res) => {
				if(res.data.errcode == 0) {
					this.findDictionaryTypeList();
				} else {
				console.log(res.data.errmsg);
				}
			}, (error) => {})
		}
	},
	mounted() {
		this.$nextTick(() => {
			this.init();
		});

	}
}
</script>

<style type="text/css" scoped>
	.w168 {
		width: 168px;
	}
</style>