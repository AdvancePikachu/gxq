<!-- 服务运行监管配置中心 -->
<template>
	<Layout>
		<Content>
			<Breadcrumb>
				<BreadcrumbItem>{{ title }}</BreadcrumbItem>
			</Breadcrumb>
			<Card>
				<Form ref="formValidate" inline :label-width="110" :model="serverData">
					<FormItem label="服务名称：">
						<Select class="queryItem" clearable v-model="serverData.appId">
							<Option v-for="item in appArr" :key="item.appId" :value="item.appId">{{item.name}}</Option>
						</Select>
					</FormItem>
          <FormItem label="接口名称：">
             <Input type="text" v-model="serverData.interfaceName" style="width:140px"></Input>
					</FormItem>
          <FormItem label="运行状态：">
						<Select class="queryItem" clearable v-model="serverData.runStatus">
							<Option :value="true">开启</Option>
							<Option :value="false">禁用</Option>
						</Select>
					</FormItem>
					<FormItem :label-width="20">
						<Button type="primary" @click="search">查询</Button>
						<Button type="primary" @click="addNew">新增</Button>
					</FormItem>
				</Form>
				<hy-table ref="selection" :data="data" :columns="columns" :total="pageOption.total" :page-size="pageOption.pageSize" @on-change="pageChange" @on-page-size-change="changePageSize" show-sizer show-elevator/>
			</Card>
      <Modal v-model="createModal" title="新建" width="40%">
        <Form ref="createForm" :model="createForm" :rules="createRule" :label-width="90">
          <FormItem label="接口名称" prop="interfaceName">
            <Input type="text" v-model="createForm.interfaceName" :disabled="disa" />
          </FormItem>
          <FormItem label="服务名称" prop="appId">
						<Select class="queryItem" clearable v-model="createForm.appId">
							<Option v-for="item in appArr" :key="item.appId" :value="item.name">{{item.name}}</Option>
						</Select>
          </FormItem>
          <FormItem label="接口地址" prop="interfaceUrl">
            <Input type="number" v-model="createForm.interfaceUrl" :disabled="disa" />
          </FormItem>
          <FormItem label="预警阈值" :required="true" prop="limit">
						<Input type="number" v-model="createForm.limit" :disabled="disa">
							<span slot="append">次/每</span>
							<Select v-model="createForm.limitCycle" slot="append" style="width: 80px">
									<Option value="小时">小时</Option>
									<Option value="天">天</Option>
									<Option value="周">周</Option>
									<Option value="月">月</Option>
							</Select>
						</Input>
          </FormItem>
          <FormItem label="责任人" :required="true" prop="dutyUser">
						<Input type="number" v-model="createForm.dutyUser" :disabled="disa"/>
          </FormItem>
          <FormItem label="确认人" :required="true" prop="confirmUser">
						<Input type="number" v-model="createForm.confirmUser" :disabled="disa"/>
          </FormItem>
          <FormItem label="抄送人" :required="true" prop="copyUser">
						<Input type="number" v-model="createForm.copyUser" :disabled="disa"/>
          </FormItem>
          <FormItem label="提醒方式" :required="true" prop="remindType">
						<Select class="queryItem" clearable v-model="createForm.remindType">
							<Option value="1">消息</Option>
							<Option value="2">短信</Option>
						</Select>
          </FormItem>
          <FormItem label="运行状态" :required="true" prop="runStatus">
						<Select class="queryItem" clearable v-model="createForm.runStatus">
							<Option :value="true">开启</Option>
							<Option :value="false">禁用</Option>
						</Select>
          </FormItem>
					<FormItem label="备注" :required="true" prop="desc">
						<Input type="textarea" v-model="createForm.desc" :disabled="disa"/>
          </FormItem>
          <!-- <FormItem label="附件报告" style="margin-top: 40px;" :required="true" prop="file">
            <hy-upload ref="evalReport" multiple :on-success="setEvalReport" :on-remove="removeEvalReport" :before-upload="evalBeforeUpload" :defaultFileList="createForm.attachment"></hy-upload>
          </FormItem> -->
        </Form>
        <div slot="footer">
          <Button class="modalBtn" type="primary" @click="saveHostRoom" size="large">确定</Button>
          <Button class="modalBtn" type="default" @click="createModal = false" size="large">取消</Button>
        </div>
      </Modal>
		</Content>
	</Layout>
</template>

<script>
	import api from '@/api/axiosApi'
	import superviseApiList from '@/api/superviseApiList'
	import hyUpload from '@/components/hengyun/hyUpload'
	import { mapState } from 'vuex'
	function getCreateForm() {
		return {
			year:'',
			month:'',
			attachment:[],
		}
	}
	export default {
		data() {
			return {
        title:this.$store.state.title,
        serverData: { //查询参数
					appId:"",//服务名称
					interfaceName:"",//接口名称
          runStatus:"",//运行状态
				},
				modelType:'0',//0新增，1修改，2详情
				appArr:this.$store.state.myServerData,
        createForm:{
          appId:'',//服务名称
					interfaceName:'',//接口名称
					interfaceUrl:'',//接口地址
					limit:'',//上限阀值
					limitCycle:'',//阀值周期 
					dutyUser:'',//责任人
					confirmUser:'',//确认人
					copyUser:'',//抄送人
					remindType:'',//提醒方式
					runStatus:"",//运行状态
					desc:'',//备注
        },
        createModal:false,
        createRule: {
					appId: [{
            required: true,
            trigger: 'blur',
            validator: (rule, value, cb) => {
							console.log(rule);
							console.log(value);
              if (!this.createForm.limit && this.createForm.limitCycle) {
                cb(new Error('预警阈值不能为空'))
                return
              }
              cb()
            }
          }],
					interfaceName: [{required: true, message: '接口名称为空', trigger: 'blur'}],
          limit: [{
            required: true,
            trigger: 'blur',
            validator: (rule, value, cb) => {
              if (!this.createForm.limit && this.createForm.limitCycle) {
                cb(new Error('预警阈值不能为空'))
                return
              }
              cb()
            }
          }],
        },
				columns: [{
						type: 'index',
						title: '序号',
						width: 60,
						align: 'center'
					},
					{
						title: '接口名称',
						key: 'interfaceName'
          },
					{
						title: '服务名称',
						key: 'appId'
          },
					{
						title: '每日上限',
						key: 'fileSize'
          },
          {
						title: '预警阈值',
						key: 'limit'
					},
					{
						title: '责任人',
						key: 'dutyUser'
          },
          {
						title: '确认人',
						key: 'confirmUser'
          },
          {
						title: '运行状态',
						key: 'createTime',
						render: (h, params) => {
              return h('span', (params.row.runStatus) ? "开启" : "禁用")
            }
					},
					{
						title: '操作',
						key: 'act',
						width: 160,
						render: (h, params) => {
							const detail = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
										this.gotoCtrl(2, params.index)
									}
								}
              },"详情");
							const edit = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
										console.log(params);
										this.gotoCtrl(1, params.index)										
									}
								}
              },"修改");
              const del = h('Button', {
								props: {
									type: 'primary',
									size: 'small'
								},
								// style: {
								// 	display:this.checkButton('hardware_bmyh_fwqgl_xq')?'inline-block':'none'
								// },
								on: {
									click: () => {
										this.itemDelete(params.row.id,params.index);										
									}
								}
							},"删除");
							return h('div', [detail, edit, del]);
						}
					}
				],
				data: [],
				pageOption: { //分页参数
					pageNo: 1,
					total: 0,
					pageSize: 10
				},
				sysVal: "",
			}
		},
		mounted() {
			this.getServerPage(); //查询服务分配管理分页
		},
		methods: {
			pageChange(num) { //页码改变的回调
				this.pageOption.pageNo = num;
				this.getServerPage();
			},
			changePageSize(num) { //切换每页条数时的回调
				this.pageOption.pageSize = num;
				this.getServerPage();
			},
			getServerPage() { // 查询分页
				this.data = [];
				var formData = {
					"data": { ...this.serverData}, 
					"pageNo": this.pageOption.pageNo,
					"pageSize": this.pageOption.pageSize
				};
				api(superviseApiList.getServerPage, formData).then((res) => {
					if(res.status == 200 && res.data.data) {
						this.data = res.data.data.list;
						if(this.data.length>0){
							this.pageOption.pageSize = res.data.data.pageSize;
							this.pageOption.total = res.data.data.total;
							this.pageOption.pageNo = res.data.data.pageNum;
							this.data.forEach(item=>{
								item.createTime = item.createTime.replace("-","年");
								item.createTime = item.createTime.replace("-","月");
								item.createTime = item.createTime.replace(" ","日 ");
								item.fileSize = (parseInt(item.fileSize/1048576)) + 'M';//计算MB大小
								item.fileNameArr = item.fileName.split(",");
								item.fileUrlArr = item.fileUrl.split(",");
							})
							console.log(this.data);
						};
					}
				}, (err) => {
					//dong something...
				})
			},
			search() {
				console.log(this.serverData);
				this.getServerPage();
      },	
      addNew(){
				console.log("新增");
				this.modelType = '0';
        this.createModal = true;
      },
      saveHostRoom(){
				let url = '';
				console.log(this.createForm);
				(this.modelType=='0') ? url = superviseApiList.saveServerPage : url = superviseApiList.updateServerPage;
				this.$refs['createForm'].validate((valid) => {
					if(valid) {
						api(url, this.createForm).then((res) => {
							if(res.status == 200 && res.data.data) {
								if(res.data.data && res.data.errmsg == 'ok'){
									let msg = (this.modelType=='0') ? '保存成功！' : '编辑成功！';
									this.$Message.success(msg);
									this.getServerPage();
								}else{
									this.$Message.error(res.data.errmsg);
								}
							}else{
								this.$Message.error(res.data.errmsg);
							}
						});
						this.createModal = false;
					}
				})
      },
      evalBeforeUpload() { //文件上传前清空
      // this.$refs.evalReport.$children[0].clearFiles();
    	},
			setEvalReport(response, file, fileList) {//获取附件
				console.log(fileList);
				fileList.forEach(item => {
					let obj = {};
					if(item.response){
						obj.busType = 'hd_applymanage_upload';
						obj.fileName = item.response.data.list[0].submittedFileName;
						obj.fileSize = item.response.data.list[0].size;
						obj.fileType = item.response.data.list[0].mime;
						obj.fileUrl = item.response.data.list[0].url;
						obj.name = item.response.data.list[0].submittedFileName;
						obj.url = item.response.data.list[0].url;
						this.createForm.attachment = this.arrConcat(this.createForm.attachment,[obj]);
					}
				});
				console.log(this.createForm);
			},
			removeEvalReport(file, fileList) {
				this.createForm.attachment = [];
				this.createForm.attachment = fileList;
			},
			itemDelete(id,idx) {//删除
        const vm = this
        vm.$Modal.confirm({
          title: '删除确认',
          content: '确认删除此节点吗？',
          onOk: () => {
            api(superviseApiList.deleteServerPage, {id: id}).then(res => {
              if (res.data.errcode === 0) {
                vm.$Message.success('删除成功！')
								vm.modal = false;
								vm.data.splice(idx, 1)
              }else{
								vm.$Message.error(res.data.errmsg)
							}
            }, error => {console.log(error)})
          }
        })
			},
			// 操作
			gotoCtrl (type, idx) {
				this.idx = idx;
				if(type==0){// 删除
					this.tableList.data.splice(idx, 1)
				}else{// 修改和详情
					const data = JSON.parse(JSON.stringify(this.data[idx]))
					this.createForm = {...getCreateForm(), ...data};
					this.createForm.typeIdArr = this.systemLoopTree(this.typeIdData);
					console.log(this.createForm);
					this.createModal = true;
					(type==1) ?　this.modelType='1' : this.modelType='2';
				}
			},
			downloadFile(url,filename){//下载文件
				let urlDownload = "/api/file/file/download?url=" + url + "&filename=" + filename;
				window.open(urlDownload);
			},
			arrConcat(arr1,arr2){//数组去重
          let arr = {};
          for(var i=0;i<arr1.length;i++){
              arr[arr1[i].name]=true;
          }
          for (var i = 0; i < arr2.length; i++) {
              if(!arr[arr2[i].name]){
                  arr1.push(arr2[i]);
              }
          }; 
          return arr1;  
      },
			checkButton(code){//按钮权限
				if(this.authButton.indexOf(code) >= 0){
					return true;
				}else{
					return false;
				}
			},
		},
		computed: {
			...mapState([
				'authButton'
			]),
			disa(){
				return(this.modelType=="2") ?  true : false;
			}
		},
		components:{
			hyUpload
		},
	}
</script>

<style lang='less' scoped>
	.ivu-btn-small {
		margin: 0 3px;
	}
	.handle{
		color:red;
		cursor: pointer;
	}
	.queryItem {
		width: 200px;
	}
	.access-list {
		span.handle {
			margin: 0 5px;
			display: inline-block;
			cursor: pointer;
			&:hover {
				color: #57a3f3;
			}
		}
	}
</style>