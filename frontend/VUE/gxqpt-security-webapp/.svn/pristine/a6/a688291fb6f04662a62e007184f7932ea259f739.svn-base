<template>
	<Card :bordered="false">
		<!--<p slot="title">修改服务器</p>-->
		<div style="text-align:center">
			<Form ref="evalData" :model="evalData" :rules="ruleValidate" :label-width="90" class="clearfix">
				<Row :gutter="40">
					<Col span="11">
					<FormItem label="服务器ID" prop="serverId">
						<Input v-model="evalData.serverId"></Input>
					</FormItem>
					</Col>
					<Col span="11">
					<FormItem label="服务器IP" prop="ip">
						<Input v-model="evalData.ip"></Input>
					</FormItem>
					</Col>
					<Col span="11">
					<FormItem label="CPU核数" prop="cpuCount">
						<Select v-model="evalData.cpuCount">
							<Option value="2">2核</Option>
							<Option value="4">4核</Option>
							<Option value="8">8核</Option>
							<Option value="16">16核</Option>
						</Select>
					</FormItem>
					</Col>
					<Col span="11">
					<FormItem label="内存大小" prop="memorySize">
						<Select v-model="evalData.memorySize">
							<Option value="2">2GB</Option>
							<Option value="4">4GB</Option>
							<Option value="8">8GB</Option>
							<Option value="16">16GB</Option>
							<Option value="32">32GB</Option>
							<Option value="64">64GB</Option>
						</Select>
					</FormItem>
					</Col>
					<Col span="11">
					<FormItem label="操作系统" prop="system">
						<Select v-model="evalData.system">
							<Option v-for="systemItem in systemArray" :value="systemItem.code">{{systemItem.name}}</Option>
						</Select>
					</FormItem>
					</Col>
					<Col span="11">
					<FormItem label="所属网络" prop="netScope">
						<Select v-model="evalData.netScope">
							<Option v-for="netScopeItem in netScopeArray" :value="netScopeItem.code">{{netScopeItem.name}}</Option>
						</Select>
					</FormItem>
					</Col>
					<Col span="11">
					<FormItem label="网络带宽" prop="netWide">
						<Select v-model="evalData.netWide">
							<Option value="10">10M</Option>
							<Option value="20">20M</Option>
							<Option value="50">50M</Option>
							<Option value="100">100M</Option>
						</Select>
					</FormItem>
					</Col>
					<Col span="11">
					<FormItem label="管理单位" prop="orgid">
						<Select v-model="evalData.orgid">
							<Option v-for="orgIetm in orgArray" :key="orgIetm.id" :value="orgIetm.id" >{{orgIetm.name}}</Option>
						</Select>
					</FormItem>
					</Col>
					<Col span="11">
					<FormItem v-for="(item, index) in evalData.dtos" :key="index" :label="'磁盘 ' + item.diskName" :prop="'dtos.' + index + '.diskSize'" :rules="[{required: true, message: '磁盘 ' + item.diskName +' 不能为空', trigger: 'blur'},{ type: 'number', message: '请输入数字格式', trigger: 'blur', transform(value) {return Number(value);}}]">
						<Row>
							<Col span="15">
							<Input type="text" v-model:number="item.diskSize" placeholder="输入磁盘容量"></Input>
							</Col>
							<Col span="2">GB</Col>
							<Col span="4" offset="1">
							<Button type="ghost" @click="handleRemove(item.diskId)">删除</Button>
							</Col>
						</Row>
					</FormItem>
					<FormItem>
						<Row>
							<Col span="24">
							<Button type="dashed" long @click="handleAdd" icon="plus-round">添加</Button>
							</Col>
						</Row>
					</FormItem>
					</Col>
				</Row>
			</Form>
		</div>
	</Card>
</template>

<script>
	import api from '@/api/axiosApi'
	import softhardApiList from '@/api/softhardApiList'
	const positiveInteger= (rule, value, callback) => {
		if(value == undefined){
			callback(new Error('该项为必填项，请填写相应数据!'));
			return false;
		};
		value = value.replace(/(^\s*)|(\s*$)/g, "");
		if(value==""){
			callback(new Error('该项为必填项，请填写相应数据!'));
		}else{
			var regu = /^[1-9]\d*$/;
			if (!regu.test(value)) {
			    callback(new Error('请填写大于等于0的数!'));
			} else {
			    callback();
			}
		}
    };
	export default {
		data() {
			return {
				index: 1,
				orgArray:[],//管理单位列表
				systemArray:[],//操作系统列表
				netScopeArray:[],//所属网络列表
				orgPointer:null,//单位指针
				evalData: {
					serverId: '',
					ip: '',
					cpuCount: null,
					memorySize: null,
					system: '',
					netScope: '',
					netWide: '',
					orgid: '',
					orgname: '',
					openTime : '',
					dtos: [{
						diskId: '',
						diskSize: '',
						diskName: 1,
					}]
				},
				ruleValidate: {
					serverId: [{
						required: true,
						message: '该项为必填项，请填写相应数据！',
						trigger: 'blur'
					}],
					ip: [{
						required: true,
						message: '该项为必填项，请填写相应数据！',
						trigger: 'blur'
					}],
					cpuCount: [{
						required: true,
						validator: positiveInteger,
						trigger: 'change'
					}],
					memorySize: [{
						required: true,
						validator: positiveInteger,
						trigger: 'change'
					}],
					system: [{
						required: true,
						message: '该项为必填项，请填写相应数据！',
						trigger: 'change'
					}],
					netScope: [{
						required: true,
						message: '该项为必填项，请填写相应数据！',
						trigger: 'change'
					}],
					netWide: [{
						required: true,
						message: '该项为必填项，请填写相应数据！',
						trigger: 'change'
					}],
					orgid: [{
						required: true,
						message: '该项为必填项，请填写相应数据！',
						trigger: 'change'
					}],
				},
			}
		},
		mounted(){
			this.czxtFindByCode();//获取操作系统列表
			this.sswlFindByCode();//获取所属网络列表
			this.findOrgByUser();//获取单位列表
		},
		methods: {
			czxtFindByCode() {//获取操作系统列表
				api(softhardApiList.dictionaryFindByCode,{code:"ZDWH_czxt"}).then((res) => {
					if(res.status == 200 && res.data.data) {
						this.systemArray = res.data.data;
					}
				}, (err) => {
					//dong something...
				})
			},
			sswlFindByCode() {//获取所属网络列表
				api(softhardApiList.dictionaryFindByCode,{code:"ZDWH_sswl_sswl111_sswl"}).then((res) => {
					if(res.status == 200 && res.data.data) {
						this.netScopeArray = res.data.data;
					}
				}, (err) => {
					//dong something...
				})
			},
			findOrgByUser() {//获取单位列表
				api(softhardApiList.orgFindOrgByUser).then((res) => {
					if(res.status == 200 && res.data.data) {
						this.orgArray = res.data.data;
					}
				}, (err) => {
					//dong something...
				})
			},
			handleSubmit(name) {
				this.$refs[name].validate((valid) => {
					if(valid) {
						var date = new Date();
						this.evalData.openTime=date.getFullYear()+"-"+(date.getMonth()+1)+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds();
						this.$emit('examine', this.evalData);
					}
				})
			},
			handleAdd() { //新增磁盘
				this.index++;
				let dtosItem = {
					diskId: "",
					diskName: this.index,
					diskSize: '',
				};
				this.evalData.dtos.push(dtosItem);
			},
			handleRemove(index) { //删除磁盘
				// this.evalData.items[index].status = 0;
				this.evalData.dtos.splice(diskName, 1);
			},
		},
		watch:{
			'evalData.orgid':function(val){
				if(val){
					for(let i in this.orgArray){
						if(val == this.orgArray[i].id);
						this.evalData.orgname=this.orgArray[i].name;
					}
				}
			},
		}
	}
</script>