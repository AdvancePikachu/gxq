<template>
  <Layout>
    <Content>
      <Breadcrumb>
        <BreadcrumbItem>运维分析</BreadcrumbItem>
        <BreadcrumbItem>应用流量监控</BreadcrumbItem>
      </Breadcrumb>
      <Card>
        <Row type="flex" justify="space-between">
          <Col style="width: 49%">
            <chart-card title="Top5接口流量">
              <Table
                border
                :columns="tableList1.columns"
                :data="tableList1.data"></Table>
            </chart-card>
          </Col>
          <Col style="width: 49%">
            <chart-card title="Top5接口利用率">
              <Table
                border
                :columns="tableList2.columns"
                :data="tableList2.data"></Table>
            </chart-card>
          </Col>
        </Row>
        <Row>
          <Col span="24">
            <chart-card title="Top5接口流量">
              <Row style="margin-top: 15px;">
                <Col span="24">
                  <RadioGroup v-model="type">
                    <Radio label="1">
                      <span>近1小时</span>
                    </Radio>
                    <Radio label="2">
                      <span>近12小时</span>
                    </Radio>
                    <Radio label="3">
                      <span>近24小时</span>
                    </Radio>
                    <Radio label="4">
                      <span>近7天</span>
                    </Radio>
                    <Radio label="5">
                      <span>近1个月</span>
                    </Radio>
                    <Radio label="6">
                      <span>近1年</span>
                    </Radio>
                  </RadioGroup>
                </Col>
              </Row>
              <chartLine ref="appflowChart1" el="appflowChart1" :lineOption="appflowChart1Option">
                <div id="appflowChart1" style="height: 400px;"></div>
              </chartLine>
              <Table
                border
                :columns="tableList1.columns"
                :data="tableList1.data"></Table>
            </chart-card>
          </Col>
        </Row>
      </Card>
    </Content>
  </Layout>
</template>

<script>
import {mapState} from 'vuex'
import api from '@/api/axiosApi'
import operationApiList from '@/api/operationApiList'
// echart图外层容器，包括卡片样式
import chartCard from '@/view/home/chartCard.vue'
import chartLine from './../echarts/ChartLine.vue'
import {areaLine} from '@/assets/js/echartOption'

function getData(type) {
  const date = Date.now()
  const xData = []
  let yData = []
  switch(type) {
    // 近一小时
    case '1':
      for (let i = 12; i > 0; i--) {
        xData.push(date - i * 5 * 60 * 1000)
      }
      yData = new Date().getHours() > 14
              ? [20, 53, 41, 63, 67, 53, 68, 46, 53, 63, 70 ,26]
              : [56, 42, 47, 58, 55, 63, 83, 72, 70, 53, 45 ,32]
      break
    // 近12小时
    case '2':
      for (let i = 12; i > 0; i--) {
        xData.push(date - i * 60 * 60 * 1000)
      }
      yData = new Date().getHours() > 14
              ? [346, 562, 487, 535, 486, 452, 386, 362, 390, 432, 450 ,480]
              : [320, 280, 310, 343, 381, 423, 405, 410, 458, 496, 531 ,483]
      break
    // 近24小时
    case '3':
      for (let i = 12; i > 0; i--) {
        xData.push(date - i * 120 * 60 * 1000)
      }
      yData = new Date().getHours() > 14
              ? [346, 562, 487, 535, 486, 452, 386, 362, 390, 432, 450 ,480]
              : [320, 280, 310, 343, 381, 423, 405, 410, 458, 496, 531 ,483]
      break
    // 近7天
    case '4':
      for (let i = 7; i > 0; i--) {
        xData.push(date - i * 24 * 60 * 60 * 1000)
      }
      yData = new Date().getHours() > 14
              ? [346, 562, 487, 535, 486, 452, 386, 362, 390, 432, 450 ,480]
              : [320, 280, 310, 343, 381, 423, 405, 410, 458, 496, 531 ,483]
      break
    // 近一个月
    case '5':
      for (let i = 30; i > 0; i--) {
        xData.push(date - i * 30 * 24 * 60 * 60 * 1000)
      }
      yData = new Date().getHours() > 14
              ? [346, 562, 487, 535, 486, 452, 386, 362, 390, 432, 450 ,480]
              : [320, 280, 310, 343, 381, 423, 405, 410, 458, 496, 531 ,483]
      break
    // 近1年
    case '6':
      for (let i = 12; i > 0; i--) {
        xData.push(date - i * 365 * 24 * 60 * 60 * 1000)
      }
      yData = new Date().getHours() > 14
              ? [346, 562, 487, 535, 486, 452, 386, 362, 390, 432, 450 ,480]
              : [320, 280, 310, 343, 381, 423, 405, 410, 458, 496, 531 ,483]
      break
  }
  return {xData, yData}
}

function changeDate(value, type) {
  const date = new Date(Number(value))
  switch(type) {
    // 近一小时
    case '1':
    // 近12小时
    case '2':
    // 近24小时
    case '3':
      return `${date.getHours()}:${date.getMinutes()}`
    // 近7天
    case '4':
    // 近一个月
    case '5':
      return `${date.getMonth() + 1}-${date.getDate()}`
    // 近1年
    case '6':
      return `${date.getFullYear()}-${date.getMonth() + 1}`
  }
}

export default {
  components: {
    chartCard,
    chartLine
  },
  data () {
    return {
      appflowChart1Option: areaLine(),
      type: '1',
      tableList1: {
        columns: [{
          title: '接口',
          key: 'service',
          align: 'center'
        }, {
          title: '流入速率',
          key: 'serviceType',
          align: 'center'
        }, {
          title: '流出速率',
          key: 'serviceName',
          align: 'center'
        }, {
          title: '流入包速率',
          key: 'serviceName',
          align: 'center'
        }, {
          title: '流出包速率',
          key: 'serviceName',
          align: 'center'
        }],
        data: []
      },
      tableList2: {
        columns: [{
          title: '接口',
          key: 'service',
          align: 'center'
        }, {
          title: '流入利用率',
          key: 'serviceType',
          align: 'center'
        }, {
          title: '流出利用率',
          key: 'serviceName',
          align: 'center'
        }],
        data: []
      }
    }
  },
  computed: {
    ...mapState(['userInfo'])
  },
  mounted() {
    this.drawTable()
    this.drawAppflowChart1('1')
  },
  methods: {
    drawTable () {
      this.tableList1.data = [{
        service: 'jkdsjfk',
        serviceType: 'jkdsjfk',
        serviceName: 'jkdsjfk',
        serviceName: 'jkdsjfk',
        serviceName: 'jkdsjfk'
      }]
      this.tableList2.data = [{
        service: 'jkdsjfk',
        serviceType: 'jkdsjfk',
        serviceName: 'jkdsjfk',
        serviceName: 'jkdsjfk',
        serviceName: 'jkdsjfk'
      }]
    },
    drawAppflowChart1 (type) {
      const num = Math.floor(Math.random() * 600)
      const data = getData(type)
      debugger
      const option = areaLine()
      option.tooltip = {
        trigger: 'axis',
        formatter: (params) => {
          const name = changeDate(params[0].name, type)
          return `${name}: ${params[0].value}`
        }
      }
      option.xAxis.data = data.xData
      option.xAxis.axisLabel = {
        formatter: (value, idx) => {
          return changeDate(value, type)
        }
      }
      option.series[0].data = data.yData
      option.series[0].areaStyle = {
        normal: {
          color: 'rgba(0, 0, 0, 0)'
        }
      }
      option.series[0].smooth = false
      this.appflowChart1Option = option
      this.$refs.appflowChart1.refresh()
    }
  },
  watch: {
    type () {
      this.drawAppflowChart1(this.type)
    }
  }
}
</script>
